
RobotControllerFirmware_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005270  08005270  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005274  08005274  00006274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  08005278  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2400000c  08005284  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00008000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcd4  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002559  00000000  00000000  00014d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00017268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000981  00000000  00000000  00017f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003495  00000000  00000000  000188a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001116f  00000000  00000000  0001bd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f547  00000000  00000000  0002cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c3f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  0015c438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0015f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005258 	.word	0x08005258

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	08005258 	.word	0x08005258

080002f0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_FMC);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f003 fd79 	bl	8003dec <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80002fa:	2214      	movs	r2, #20
 80002fc:	2100      	movs	r1, #0
 80002fe:	4806      	ldr	r0, [pc, #24]	@ (8000318 <MX_EXTMEM_MANAGER_Init+0x28>)
 8000300:	f004 ff7e 	bl	8005200 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_USER;
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <MX_EXTMEM_MANAGER_Init+0x28>)
 8000306:	2204      	movs	r2, #4
 8000308:	701a      	strb	r2, [r3, #0]

  EXTMEM_Init(EXTMEMORY_1, 0);
 800030a:	2100      	movs	r1, #0
 800030c:	2000      	movs	r0, #0
 800030e:	f004 fe63 	bl	8004fd8 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	240000f4 	.word	0x240000f4

0800031c <MX_GPIO_Init>:
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b087      	sub	sp, #28
 8000320:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOP_CLK_ENABLE();
 8000322:	4b23      	ldr	r3, [pc, #140]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000324:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000328:	4a21      	ldr	r2, [pc, #132]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800032a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800032e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000332:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000334:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOO_CLK_ENABLE();
 800033c:	4b1c      	ldr	r3, [pc, #112]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800033e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000342:	4a1b      	ldr	r2, [pc, #108]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000348:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800034e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPION_CLK_ENABLE();
 8000356:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000358:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800035c:	4a14      	ldr	r2, [pc, #80]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000362:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000368:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000372:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000376:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000382:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800038c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <MX_GPIO_Init+0x94>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800039a:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <MX_GPIO_Init+0x94>)
 800039c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

}
 80003a4:	bf00      	nop
 80003a6:	371c      	adds	r7, #28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	58024400 	.word	0x58024400

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b8:	f000 f8ab 	bl	8000512 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f001 f877 	bl	80014ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f814 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f7ff ffaa 	bl	800031c <MX_GPIO_Init>
  MX_SBS_Init();
 80003c8:	f000 f93d 	bl	8000646 <MX_SBS_Init>
  MX_XSPI1_Init();
 80003cc:	f000 fc56 	bl	8000c7c <MX_XSPI1_Init>
  MX_XSPI2_Init();
 80003d0:	f000 fcae 	bl	8000d30 <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
 80003d4:	f7ff ff8c 	bl	80002f0 <MX_EXTMEM_MANAGER_Init>


  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 80003d8:	f004 fd14 	bl	8004e04 <BOOT_Application>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d002      	beq.n	80003e8 <main+0x34>
  {
    Error_Handler();
 80003e2:	f000 f92a 	bl	800063a <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <main+0x34>

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b0b0      	sub	sp, #192	@ 0xc0
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	229c      	movs	r2, #156	@ 0x9c
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 ff00 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2220      	movs	r2, #32
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 fefa 	bl	8005200 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800040c:	2001      	movs	r0, #1
 800040e:	f001 fe13 	bl	8002038 <HAL_PWREx_ControlVoltageScaling>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000418:	f000 f90f 	bl	800063a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041c:	2301      	movs	r3, #1
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000424:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSE;
 800042a:	2302      	movs	r3, #2
 800042c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 60;
 8000432:	233c      	movs	r3, #60	@ 0x3c
 8000434:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 8000436:	2301      	movs	r3, #1
 8000438:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSE;
 8000452:	2302      	movs	r3, #2
 8000454:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 60;
 800045a:	233c      	movs	r3, #60	@ 0x3c
 800045c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 800045e:	2302      	movs	r3, #2
 8000460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 8000464:	2302      	movs	r3, #2
 8000466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 800046a:	2302      	movs	r3, #2
 800046c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 2;
 8000470:	2302      	movs	r3, #2
 8000472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 8000476:	2302      	movs	r3, #2
 8000478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSE;
 8000488:	2302      	movs	r3, #2
 800048a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLM = 1;
 800048e:	2301      	movs	r3, #1
 8000490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLN = 40;
 8000494:	2328      	movs	r3, #40	@ 0x28
 8000496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLP = 2;
 800049a:	2302      	movs	r3, #2
 800049c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLQ = 2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLR = 16;
 80004a6:	2310      	movs	r3, #16
 80004a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLS = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLT = 2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fe00 	bl	80020c8 <HAL_RCC_OscConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80004ce:	f000 f8b4 	bl	800063a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	233f      	movs	r3, #63	@ 0x3f
 80004d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d6:	2303      	movs	r3, #3
 80004d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004de:	2308      	movs	r3, #8
 80004e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004e2:	2304      	movs	r3, #4
 80004e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004e6:	2340      	movs	r3, #64	@ 0x40
 80004e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 80004f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2137      	movs	r1, #55	@ 0x37
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f91e 	bl	800273c <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000506:	f000 f898 	bl	800063a <Error_Handler>
  }
}
 800050a:	bf00      	nop
 800050c:	37c0      	adds	r7, #192	@ 0xc0
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000524:	f001 fa04 	bl	8001930 <HAL_MPU_Disable>

  /* Disables all MPU regions */
  for(uint8_t i=0; i<__MPU_REGIONCOUNT; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	e006      	b.n	800053c <MPU_Config+0x2a>
  {
    HAL_MPU_DisableRegion(i);
 800052e:	7dfb      	ldrb	r3, [r7, #23]
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fa1b 	bl	800196c <HAL_MPU_DisableRegion>
  for(uint8_t i=0; i<__MPU_REGIONCOUNT; i++)
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	3301      	adds	r3, #1
 800053a:	75fb      	strb	r3, [r7, #23]
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d9f5      	bls.n	800052e <MPU_Config+0x1c>
  }

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000542:	2301      	movs	r3, #1
 8000544:	713b      	strb	r3, [r7, #4]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000546:	2300      	movs	r3, #0
 8000548:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.BaseAddress = 0x0;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800054e:	231f      	movs	r3, #31
 8000550:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000552:	2387      	movs	r3, #135	@ 0x87
 8000554:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000556:	2300      	movs	r3, #0
 8000558:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800055a:	2300      	movs	r3, #0
 800055c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800055e:	2301      	movs	r3, #1
 8000560:	743b      	strb	r3, [r7, #16]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000562:	2301      	movs	r3, #1
 8000564:	747b      	strb	r3, [r7, #17]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	74bb      	strb	r3, [r7, #18]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	74fb      	strb	r3, [r7, #19]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fa11 	bl	8001998 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000576:	2301      	movs	r3, #1
 8000578:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.BaseAddress = 0x08000000;
 800057a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800057e:	60bb      	str	r3, [r7, #8]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000580:	230f      	movs	r3, #15
 8000582:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000584:	2300      	movs	r3, #0
 8000586:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000588:	2303      	movs	r3, #3
 800058a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	743b      	strb	r3, [r7, #16]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	747b      	strb	r3, [r7, #17]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000594:	2301      	movs	r3, #1
 8000596:	74bb      	strb	r3, [r7, #18]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f9fc 	bl	8001998 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.BaseAddress = 0x70000000;
 80005a4:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80005a8:	60bb      	str	r3, [r7, #8]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80005aa:	231b      	movs	r3, #27
 80005ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	743b      	strb	r3, [r7, #16]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	747b      	strb	r3, [r7, #17]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	74bb      	strb	r3, [r7, #18]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f9e9 	bl	8001998 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80005c6:	2303      	movs	r3, #3
 80005c8:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80005ca:	2316      	movs	r3, #22
 80005cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80005d2:	2303      	movs	r3, #3
 80005d4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80005d6:	2301      	movs	r3, #1
 80005d8:	74bb      	strb	r3, [r7, #18]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80005da:	2301      	movs	r3, #1
 80005dc:	74fb      	strb	r3, [r7, #19]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f9d9 	bl	8001998 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80005ea:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80005ee:	60bb      	str	r3, [r7, #8]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80005f0:	231b      	movs	r3, #27
 80005f2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	74bb      	strb	r3, [r7, #18]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	74fb      	strb	r3, [r7, #19]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f9c6 	bl	8001998 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800060c:	2305      	movs	r3, #5
 800060e:	717b      	strb	r3, [r7, #5]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000610:	2316      	movs	r3, #22
 8000612:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000614:	2303      	movs	r3, #3
 8000616:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	743b      	strb	r3, [r7, #16]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	747b      	strb	r3, [r7, #17]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000620:	2301      	movs	r3, #1
 8000622:	74bb      	strb	r3, [r7, #18]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f9b6 	bl	8001998 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800062c:	2004      	movs	r0, #4
 800062e:	f001 f95d 	bl	80018ec <HAL_MPU_Enable>

}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063e:	b672      	cpsid	i
}
 8000640:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <Error_Handler+0x8>

08000646 <MX_SBS_Init>:

/* USER CODE END 0 */

/* SBS init function */
void MX_SBS_Init(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0a8      	sub	sp, #160	@ 0xa0
 8000658:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	229c      	movs	r2, #156	@ 0x9c
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f004 fdcd 	bl	8005200 <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 8000666:	2002      	movs	r0, #2
 8000668:	f001 fc94 	bl	8001f94 <HAL_PWREx_ConfigSupply>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 8000672:	f7ff ffe2 	bl	800063a <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_MspInit+0x90>)
 8000678:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800067c:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <HAL_MspInit+0x90>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <HAL_MspInit+0x90>)
 8000688:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Enable the XSPIM_P1 interface */
  HAL_PWREx_EnableXSPIM1();
 8000690:	f001 fcfa 	bl	8002088 <HAL_PWREx_EnableXSPIM1>

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 8000694:	f001 fd08 	bl	80020a8 <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000698:	2310      	movs	r3, #16
 800069a:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fd10 	bl	80020c8 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_MspInit+0x5e>
  {
    Error_Handler();
 80006ae:	f7ff ffc4 	bl	800063a <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2010      	movs	r0, #16
 80006ba:	f000 ffcb 	bl	8001654 <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 ff9e 	bl	8001600 <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 80006c4:	bf00      	nop
 80006c6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80006ca:	f000 ffad 	bl	8001628 <HAL_SBS_GetCompensationCellReadyStatus>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d1f8      	bne.n	80006c6 <HAL_MspInit+0x72>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 80006d4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80006d8:	f001 f810 	bl	80016fc <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	37a0      	adds	r7, #160	@ 0xa0
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024400 	.word	0x58024400

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 ff0b 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <SystemInit+0x24>)
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <SystemInit+0x28>)
 8000750:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SystemInit+0x24>)
 8000754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <SystemInit+0x24>)
 800075a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800075e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	08000000 	.word	0x08000000

08000774 <EXTMEM_DRIVER_USER_Init>:
  * @{
  */

EXTMEM_DRIVER_USER_StatusTypeDef EXTMEM_DRIVER_USER_Init(uint32_t MemoryId,
                                                         EXTMEM_DRIVER_USER_ObjectTypeDef* UserObject)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOP, GPIO_PIN_2, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2104      	movs	r1, #4
 8000782:	4820      	ldr	r0, [pc, #128]	@ (8000804 <EXTMEM_DRIVER_USER_Init+0x90>)
 8000784:	f001 fbee 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOP, GPIO_PIN_3, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	481d      	ldr	r0, [pc, #116]	@ (8000804 <EXTMEM_DRIVER_USER_Init+0x90>)
 800078e:	f001 fbe9 	bl	8001f64 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f000 ff00 	bl	8001598 <HAL_Delay>

	if ( SST26VF064B_Reset() != EXTMEM_DRIVER_USER_OK){
 8000798:	f000 f8c6 	bl	8000928 <SST26VF064B_Reset>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <EXTMEM_DRIVER_USER_Init+0x34>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a6:	e028      	b.n	80007fa <EXTMEM_DRIVER_USER_Init+0x86>
	}

	HAL_Delay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fef5 	bl	8001598 <HAL_Delay>
	if ( SST26VF064B_Reset_QIO() != EXTMEM_DRIVER_USER_OK){
 80007ae:	f000 f927 	bl	8000a00 <SST26VF064B_Reset_QIO>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <EXTMEM_DRIVER_USER_Init+0x4a>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007bc:	e01d      	b.n	80007fa <EXTMEM_DRIVER_USER_Init+0x86>
	}

	HAL_GPIO_WritePin(GPIOP, GPIO_PIN_2, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2104      	movs	r1, #4
 80007c2:	4810      	ldr	r0, [pc, #64]	@ (8000804 <EXTMEM_DRIVER_USER_Init+0x90>)
 80007c4:	f001 fbce 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOP, GPIO_PIN_3, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2108      	movs	r1, #8
 80007cc:	480d      	ldr	r0, [pc, #52]	@ (8000804 <EXTMEM_DRIVER_USER_Init+0x90>)
 80007ce:	f001 fbc9 	bl	8001f64 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fee0 	bl	8001598 <HAL_Delay>

	if ( SST26VF064B_Enable_QIO() != EXTMEM_DRIVER_USER_OK){
 80007d8:	f000 f8e4 	bl	80009a4 <SST26VF064B_Enable_QIO>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <EXTMEM_DRIVER_USER_Init+0x74>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e6:	e008      	b.n	80007fa <EXTMEM_DRIVER_USER_Init+0x86>
	}

	if ( SST26VF064B_Global_Block_Protecion_Unlock() != EXTMEM_DRIVER_USER_OK){
 80007e8:	f000 f970 	bl	8000acc <SST26VF064B_Global_Block_Protecion_Unlock>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <EXTMEM_DRIVER_USER_Init+0x84>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f6:	e000      	b.n	80007fa <EXTMEM_DRIVER_USER_Init+0x86>
	}
  return EXTMEM_DRIVER_USER_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58023c00 	.word	0x58023c00

08000808 <EXTMEM_DRIVER_USER_DeInit>:

 EXTMEM_DRIVER_USER_StatusTypeDef EXTMEM_DRIVER_USER_DeInit(EXTMEM_DRIVER_USER_ObjectTypeDef* UserObject)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_USER_StatusTypeDef retr = EXTMEM_DRIVER_USER_NOTSUPPORTED;
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	73fb      	strb	r3, [r7, #15]
  (void)UserObject;
  return retr;
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode>:

	return EXTMEM_DRIVER_USER_OK;
}

 EXTMEM_DRIVER_USER_StatusTypeDef EXTMEM_DRIVER_USER_Enable_MemoryMappedMode(EXTMEM_DRIVER_USER_ObjectTypeDef* UserObject)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b098      	sub	sp, #96	@ 0x60
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	XSPI_RegularCmdTypeDef sCommand;
	XSPI_MemoryMappedTypeDef sMemMappedCfg;

	sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = SST26VF064B_SQIOR;
 8000834:	23eb      	movs	r3, #235	@ 0xeb
 8000836:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = SST26VF064B_HIGH_SPEED_READ;
 8000838:	230b      	movs	r3, #11
 800083a:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Address = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 800084c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8000852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 6;
 8000860:	2306      	movs	r3, #6
 8000862:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DataMode = HAL_XSPI_DATA_4_LINES;
 8000864:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.DataLength = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	65fb      	str	r3, [r7, #92]	@ 0x5c


	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087e:	4619      	mov	r1, r3
 8000880:	4816      	ldr	r0, [pc, #88]	@ (80008dc <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb8>)
 8000882:	f003 fbd6 	bl	8004032 <HAL_XSPI_Command>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0x6e>
		return EXTMEM_DRIVER_USER_ERROR_1;
 800088c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000890:	e020      	b.n	80008d4 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb0>
	}

	sCommand.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8000892:	2302      	movs	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = SST26VF064B_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb8>)
 80008a6:	f003 fbc4 	bl	8004032 <HAL_XSPI_Command>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0x92>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b4:	e00e      	b.n	80008d4 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb0>
	}

	sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]

	if(HAL_XSPI_MemoryMapped(&hxspi1, &sMemMappedCfg) != HAL_OK){
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	@ (80008dc <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb8>)
 80008c2:	f003 fe97 	bl	80045f4 <HAL_XSPI_MemoryMapped>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xae>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d0:	e000      	b.n	80008d4 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode+0xb0>
	}

	return EXTMEM_DRIVER_USER_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3760      	adds	r7, #96	@ 0x60
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000028 	.word	0x24000028

080008e0 <EXTMEM_DRIVER_USER_Disable_MemoryMappedMode>:

 EXTMEM_DRIVER_USER_StatusTypeDef EXTMEM_DRIVER_USER_Disable_MemoryMappedMode(EXTMEM_DRIVER_USER_ObjectTypeDef* UserObject)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if (HAL_XSPI_Abort(&hxspi1) != HAL_OK){
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <EXTMEM_DRIVER_USER_Disable_MemoryMappedMode+0x24>)
 80008ea:	f003 fed1 	bl	8004690 <HAL_XSPI_Abort>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <EXTMEM_DRIVER_USER_Disable_MemoryMappedMode+0x1a>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008f8:	e000      	b.n	80008fc <EXTMEM_DRIVER_USER_Disable_MemoryMappedMode+0x1c>
	}
	return EXTMEM_DRIVER_USER_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000028 	.word	0x24000028

08000908 <EXTMEM_DRIVER_USER_GetMapAddress>:

 EXTMEM_DRIVER_USER_StatusTypeDef EXTMEM_DRIVER_USER_GetMapAddress(EXTMEM_DRIVER_USER_ObjectTypeDef* UserObject, uint32_t* BaseAddress)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  *BaseAddress = 0x90000000;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8000918:	601a      	str	r2, [r3, #0]
  return EXTMEM_DRIVER_USER_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SST26VF064B_Reset>:
/** @addtogroup USER_Private_Functions
  * @{
  */

 EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_Reset()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	@ 0x50
 800092c:	af00      	add	r7, sp, #0
	XSPI_RegularCmdTypeDef sCommand;
	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = SST26VF064B_RSTEN;
 8000936:	2366      	movs	r3, #102	@ 0x66
 8000938:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode = HAL_XSPI_DATA_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataLength = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000964:	4619      	mov	r1, r3
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <SST26VF064B_Reset+0x78>)
 8000968:	f003 fb63 	bl	8004032 <HAL_XSPI_Command>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <SST26VF064B_Reset+0x50>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000976:	e00f      	b.n	8000998 <SST26VF064B_Reset+0x70>
	}

	sCommand.Instruction = SST26VF064B_RST;
 8000978:	2399      	movs	r3, #153	@ 0x99
 800097a:	60fb      	str	r3, [r7, #12]

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000982:	4619      	mov	r1, r3
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <SST26VF064B_Reset+0x78>)
 8000986:	f003 fb54 	bl	8004032 <HAL_XSPI_Command>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <SST26VF064B_Reset+0x6e>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	e000      	b.n	8000998 <SST26VF064B_Reset+0x70>
	}

	return EXTMEM_DRIVER_USER_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3750      	adds	r7, #80	@ 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000028 	.word	0x24000028

080009a4 <SST26VF064B_Enable_QIO>:




EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_Enable_QIO()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	@ 0x50
 80009a8:	af00      	add	r7, sp, #0

	XSPI_RegularCmdTypeDef sCommand;
	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = SST26VF064B_EQIO;
 80009b2:	2338      	movs	r3, #56	@ 0x38
 80009b4:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode = HAL_XSPI_DATA_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataLength = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	@ (80009fc <SST26VF064B_Enable_QIO+0x58>)
 80009e0:	f003 fb27 	bl	8004032 <HAL_XSPI_Command>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <SST26VF064B_Enable_QIO+0x4c>
		return EXTMEM_DRIVER_USER_ERROR_1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ee:	e000      	b.n	80009f2 <SST26VF064B_Enable_QIO+0x4e>
	}
	return EXTMEM_DRIVER_USER_OK;
 80009f0:	2300      	movs	r3, #0

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3750      	adds	r7, #80	@ 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000028 	.word	0x24000028

08000a00 <SST26VF064B_Reset_QIO>:


EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_Reset_QIO()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
	XSPI_RegularCmdTypeDef sCommand;
	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = SST26VF064B_RSTQIO;
 8000a0e:	23ff      	movs	r3, #255	@ 0xff
 8000a10:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode = HAL_XSPI_DATA_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataLength = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <SST26VF064B_Reset_QIO+0x58>)
 8000a3c:	f003 faf9 	bl	8004032 <HAL_XSPI_Command>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <SST26VF064B_Reset_QIO+0x4c>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4a:	e000      	b.n	8000a4e <SST26VF064B_Reset_QIO+0x4e>
	}
	return EXTMEM_DRIVER_USER_OK;
 8000a4c:	2300      	movs	r3, #0

}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3750      	adds	r7, #80	@ 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000028 	.word	0x24000028

08000a5c <SST26VF064B_Write_EN>:


EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_Write_EN(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0

	XSPI_RegularCmdTypeDef sCommand;
	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = SST26VF064B_WREN;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	613b      	str	r3, [r7, #16]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode = HAL_XSPI_DATA_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataLength = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <SST26VF064B_Write_EN+0x6c>)
 8000a9c:	f003 fac9 	bl	8004032 <HAL_XSPI_Command>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <SST26VF064B_Write_EN+0x50>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aaa:	e008      	b.n	8000abe <SST26VF064B_Write_EN+0x62>
	}

	if (SST26VF064B_AutoPollingWriteEnableLatch() != EXTMEM_DRIVER_USER_OK){
 8000aac:	f000 f89a 	bl	8000be4 <SST26VF064B_AutoPollingWriteEnableLatch>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <SST26VF064B_Write_EN+0x60>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aba:	e000      	b.n	8000abe <SST26VF064B_Write_EN+0x62>
	}
	return EXTMEM_DRIVER_USER_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3750      	adds	r7, #80	@ 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000028 	.word	0x24000028

08000acc <SST26VF064B_Global_Block_Protecion_Unlock>:



EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_Global_Block_Protecion_Unlock(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
	if (SST26VF064B_Write_EN() != EXTMEM_DRIVER_USER_OK){
 8000ad2:	f7ff ffc3 	bl	8000a5c <SST26VF064B_Write_EN>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <SST26VF064B_Global_Block_Protecion_Unlock+0x16>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae0:	e02d      	b.n	8000b3e <SST26VF064B_Global_Block_Protecion_Unlock+0x72>
	}

	XSPI_RegularCmdTypeDef sCommand;

	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = SST26VF064B_ULBPR;
 8000aea:	2398      	movs	r3, #152	@ 0x98
 8000aec:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8000aee:	2303      	movs	r3, #3
 8000af0:	613b      	str	r3, [r7, #16]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode = HAL_XSPI_DATA_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataLength = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <SST26VF064B_Global_Block_Protecion_Unlock+0x7c>)
 8000b1c:	f003 fa89 	bl	8004032 <HAL_XSPI_Command>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <SST26VF064B_Global_Block_Protecion_Unlock+0x60>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2a:	e008      	b.n	8000b3e <SST26VF064B_Global_Block_Protecion_Unlock+0x72>
	}

	if (SST26VF064B_AutoPollingMemReady() != EXTMEM_DRIVER_USER_OK){
 8000b2c:	f000 f80e 	bl	8000b4c <SST26VF064B_AutoPollingMemReady>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <SST26VF064B_Global_Block_Protecion_Unlock+0x70>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b3a:	e000      	b.n	8000b3e <SST26VF064B_Global_Block_Protecion_Unlock+0x72>
	}

	return EXTMEM_DRIVER_USER_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3750      	adds	r7, #80	@ 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000028 	.word	0x24000028

08000b4c <SST26VF064B_AutoPollingMemReady>:
}



EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_AutoPollingMemReady()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b098      	sub	sp, #96	@ 0x60
 8000b50:	af00      	add	r7, sp, #0
	XSPI_RegularCmdTypeDef sCommand;
	XSPI_AutoPollingTypeDef autoPolling;

	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = SST26VF064B_RDSR;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DataMode = HAL_XSPI_DATA_4_LINES;
 8000b72:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.DataLength = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.DummyCycles = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	@ 0x5c

	autoPolling.MatchValue = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
	autoPolling.MatchMask = SST26VF064B_WIP;
 8000b8c:	2381      	movs	r3, #129	@ 0x81
 8000b8e:	607b      	str	r3, [r7, #4]
	autoPolling.MatchMode = HAL_XSPI_MATCH_MODE_AND;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
	autoPolling.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8000b94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b98:	60fb      	str	r3, [r7, #12]
	autoPolling.IntervalTime = 0x10;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	613b      	str	r3, [r7, #16]

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <SST26VF064B_AutoPollingMemReady+0x94>)
 8000baa:	f003 fa42 	bl	8004032 <HAL_XSPI_Command>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <SST26VF064B_AutoPollingMemReady+0x6e>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb8:	e00d      	b.n	8000bd6 <SST26VF064B_AutoPollingMemReady+0x8a>
	}

	if (HAL_XSPI_AutoPolling(&hxspi1, &autoPolling, SST26VF064B_TIMEOUT)){
 8000bba:	463b      	mov	r3, r7
 8000bbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <SST26VF064B_AutoPollingMemReady+0x94>)
 8000bc4:	f003 fc8c 	bl	80044e0 <HAL_XSPI_AutoPolling>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <SST26VF064B_AutoPollingMemReady+0x88>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bd2:	e000      	b.n	8000bd6 <SST26VF064B_AutoPollingMemReady+0x8a>
	}

	return EXTMEM_DRIVER_USER_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3760      	adds	r7, #96	@ 0x60
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000028 	.word	0x24000028

08000be4 <SST26VF064B_AutoPollingWriteEnableLatch>:

EXTMEM_DRIVER_USER_StatusTypeDef SST26VF064B_AutoPollingWriteEnableLatch()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b098      	sub	sp, #96	@ 0x60
 8000be8:	af00      	add	r7, sp, #0
	XSPI_RegularCmdTypeDef sCommand;
	XSPI_AutoPollingTypeDef autoPolling;

	sCommand.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
	sCommand.IOSelect = HAL_XSPI_SELECT_IO_3_0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = SST26VF064B_RDSR;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
	sCommand.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DataMode = HAL_XSPI_DATA_4_LINES;
 8000c0a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.DataLength = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.DummyCycles = 2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c


	autoPolling.MatchValue = SST26VF064B_WEL;
 8000c20:	2302      	movs	r3, #2
 8000c22:	603b      	str	r3, [r7, #0]
	autoPolling.MatchMask = SST26VF064B_WEL;
 8000c24:	2302      	movs	r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
	autoPolling.MatchMode = HAL_XSPI_MATCH_MODE_OR;
 8000c28:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000c2c:	60bb      	str	r3, [r7, #8]
	autoPolling.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c32:	60fb      	str	r3, [r7, #12]
	autoPolling.IntervalTime = 0x10;
 8000c34:	2310      	movs	r3, #16
 8000c36:	613b      	str	r3, [r7, #16]

	if (HAL_XSPI_Command(&hxspi1, &sCommand, SST26VF064B_TIMEOUT) != HAL_OK){
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <SST26VF064B_AutoPollingWriteEnableLatch+0x94>)
 8000c44:	f003 f9f5 	bl	8004032 <HAL_XSPI_Command>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <SST26VF064B_AutoPollingWriteEnableLatch+0x70>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c52:	e00d      	b.n	8000c70 <SST26VF064B_AutoPollingWriteEnableLatch+0x8c>
	}

	if (HAL_XSPI_AutoPolling(&hxspi1, &autoPolling, SST26VF064B_TIMEOUT)){
 8000c54:	463b      	mov	r3, r7
 8000c56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <SST26VF064B_AutoPollingWriteEnableLatch+0x94>)
 8000c5e:	f003 fc3f 	bl	80044e0 <HAL_XSPI_AutoPolling>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <SST26VF064B_AutoPollingWriteEnableLatch+0x8a>
		return EXTMEM_DRIVER_USER_ERROR_1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c6c:	e000      	b.n	8000c70 <SST26VF064B_AutoPollingWriteEnableLatch+0x8c>
	}

	return EXTMEM_DRIVER_USER_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3760      	adds	r7, #96	@ 0x60
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000028 	.word	0x24000028

08000c7c <MX_XSPI1_Init>:
XSPI_HandleTypeDef hxspi1;
XSPI_HandleTypeDef hxspi2;

/* XSPI1 init function */
void MX_XSPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  hxspi1.Instance = XSPI1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000c8e:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <MX_XSPI1_Init+0xb0>)
 8000c90:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000c92:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000c94:	2204      	movs	r2, #4
 8000c96:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000c98:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000ca6:	2216      	movs	r2, #22
 8000ca8:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 3;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 3-1;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000cf0:	f003 f890 	bl	8003e14 <HAL_XSPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_XSPI1_Init+0x82>
  {
    Error_Handler();
 8000cfa:	f7ff fc9e 	bl	800063a <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_XSPI1_Init+0xac>)
 8000d10:	f003 fd54 	bl	80047bc <HAL_XSPIM_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_XSPI1_Init+0xa2>
  {
    Error_Handler();
 8000d1a:	f7ff fc8e 	bl	800063a <Error_Handler>
  /* USER CODE BEGIN XSPI1_Init 2 */


  /* USER CODE END XSPI1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000028 	.word	0x24000028
 8000d2c:	52005000 	.word	0x52005000

08000d30 <MX_XSPI2_Init>:
/* XSPI2 init function */
void MX_XSPI2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09a      	sub	sp, #104	@ 0x68
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 8000d36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
  XSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000d42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  hxspi2.Instance = XSPI2;
 8000d50:	4bb5      	ldr	r3, [pc, #724]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d52:	4ab6      	ldr	r2, [pc, #728]	@ (800102c <MX_XSPI2_Init+0x2fc>)
 8000d54:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 8000d56:	4bb4      	ldr	r3, [pc, #720]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d5c:	4bb2      	ldr	r3, [pc, #712]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_HYPERBUS;
 8000d62:	4bb1      	ldr	r3, [pc, #708]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d68:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 8000d6a:	4baf      	ldr	r3, [pc, #700]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d6c:	2216      	movs	r2, #22
 8000d6e:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 8000d70:	4bad      	ldr	r3, [pc, #692]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d76:	4bac      	ldr	r3, [pc, #688]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d7c:	4baa      	ldr	r3, [pc, #680]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_128_BYTES;
 8000d82:	4ba9      	ldr	r3, [pc, #676]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d84:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000d88:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 8-1;
 8000d8a:	4ba7      	ldr	r3, [pc, #668]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000d90:	4ba5      	ldr	r3, [pc, #660]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8000d96:	4ba4      	ldr	r3, [pc, #656]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000d9e:	4ba2      	ldr	r3, [pc, #648]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 8000da4:	4ba0      	ldr	r3, [pc, #640]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 200;
 8000daa:	4b9f      	ldr	r3, [pc, #636]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000dac:	22c8      	movs	r2, #200	@ 0xc8
 8000dae:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS2;
 8000db0:	4b9d      	ldr	r3, [pc, #628]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000db2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 8000db8:	489b      	ldr	r0, [pc, #620]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000dba:	f003 f82b 	bl	8003e14 <HAL_XSPI_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_XSPI2_Init+0x98>
  {
    Error_Handler();
 8000dc4:	f7ff fc39 	bl	800063a <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	657b      	str	r3, [r7, #84]	@ 0x54
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4893      	ldr	r0, [pc, #588]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000ddc:	f003 fcee 	bl	80047bc <HAL_XSPIM_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_XSPI2_Init+0xba>
  {
    Error_Handler();
 8000de6:	f7ff fc28 	bl	800063a <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTimeCycle = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	647b      	str	r3, [r7, #68]	@ 0x44
  sHyperBusCfg.AccessTimeCycle = 7;
 8000dee:	2307      	movs	r3, #7
 8000df0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sHyperBusCfg.WriteZeroLatency = HAL_XSPI_NO_LATENCY_ON_WRITE;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sHyperBusCfg.LatencyMode = HAL_XSPI_FIXED_LATENCY;
 8000df6:	2301      	movs	r3, #1
 8000df8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_XSPI_HyperbusCfg(&hxspi2, &sHyperBusCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dfa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e02:	4619      	mov	r1, r3
 8000e04:	4888      	ldr	r0, [pc, #544]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000e06:	f003 f9a4 	bl	8004152 <HAL_XSPI_HyperbusCfg>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_XSPI2_Init+0xe4>
  {
    Error_Handler();
 8000e10:	f7ff fc13 	bl	800063a <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */
	uint16_t rx;
	uint16_t tx;

	tx = (S27KS0642_NORMAL_OPERATION << 15) |
 8000e14:	f64b 732c 	movw	r3, #48940	@ 0xbf2c
 8000e18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	   (S27KS0642_LEGACY_WRAPPED_BURST << 2) |
	   (S27KS0642_128_BYTES);

	XSPI_HyperbusCmdTypeDef cmd;

	uint8_t reg_data[2] = {0};
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	853b      	strh	r3, [r7, #40]	@ 0x28
	reg_data[1] = tx >> 8;
 8000e20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	reg_data[0] = (uint8_t) tx;
 8000e2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	cmd.Address = S27KS0642_CR0*2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
	cmd.AddressSpace = HAL_XSPI_REGISTER_ADDRESS_SPACE;
 8000e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8000e44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
	cmd.DQSMode = HAL_XSPI_DQS_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	cmd.DataLength = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.DataMode = HAL_XSPI_DATA_8_LINES;
 8000e52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 8000e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e60:	4619      	mov	r1, r3
 8000e62:	4871      	ldr	r0, [pc, #452]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000e64:	f003 f9b8 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_XSPI2_Init+0x142>
		Error_Handler();
 8000e6e:	f7ff fbe4 	bl	800063a <Error_Handler>
	}

	if (HAL_XSPI_Transmit(&hxspi2, reg_data, S27KS0642_TIMEOUT) != HAL_OK){
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	486a      	ldr	r0, [pc, #424]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000e7e:	f003 fa19 	bl	80042b4 <HAL_XSPI_Transmit>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_XSPI2_Init+0x15c>
		Error_Handler();
 8000e88:	f7ff fbd7 	bl	800063a <Error_Handler>
	}

	tx = (S27KS0642_CR1_RESERVED_HIGH << 8) |
 8000e8c:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8000e90:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	 (S27KS0642_DIFFERENTIAL_CK << 6) |
	 (S27KS0642_NORMAL_OPERATION_CR1 << 5) |
	 (S27KS0642_FULL_ARRAY << 2) |
	 (S27KS0642_REFRESH_4US);

	reg_data[1] = tx >> 8;
 8000e94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	reg_data[0] = (uint8_t) tx;
 8000ea2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	cmd.Address = S27KS0642_CR1*2;
 8000eac:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 8000eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eba:	4619      	mov	r1, r3
 8000ebc:	485a      	ldr	r0, [pc, #360]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000ebe:	f003 f98b 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_XSPI2_Init+0x19c>
		Error_Handler();
 8000ec8:	f7ff fbb7 	bl	800063a <Error_Handler>
	}

	if (HAL_XSPI_Transmit(&hxspi2, reg_data, S27KS0642_TIMEOUT) != HAL_OK){
 8000ecc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4854      	ldr	r0, [pc, #336]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000ed8:	f003 f9ec 	bl	80042b4 <HAL_XSPI_Transmit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_XSPI2_Init+0x1b6>
		Error_Handler();
 8000ee2:	f7ff fbaa 	bl	800063a <Error_Handler>
	}


	if (HAL_XSPI_DeInit(&hxspi2) != HAL_OK)
 8000ee6:	4850      	ldr	r0, [pc, #320]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000ee8:	f003 f87c 	bl	8003fe4 <HAL_XSPI_DeInit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_XSPI2_Init+0x1c6>
	{
		Error_Handler();
 8000ef2:	f7ff fba2 	bl	800063a <Error_Handler>
	}


	hxspi2.Instance = XSPI2;
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <MX_XSPI2_Init+0x2fc>)
 8000efa:	601a      	str	r2, [r3, #0]
	hxspi2.Init.FifoThresholdByte = 4;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	605a      	str	r2, [r3, #4]
	hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
	hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_HYPERBUS;
 8000f08:	4b47      	ldr	r3, [pc, #284]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f0e:	60da      	str	r2, [r3, #12]
	hxspi2.Init.MemorySize = 29;
 8000f10:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f12:	221d      	movs	r2, #29
 8000f14:	611a      	str	r2, [r3, #16]
	hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000f16:	4b44      	ldr	r3, [pc, #272]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
	hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000f1c:	4b42      	ldr	r3, [pc, #264]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
	hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000f22:	4b41      	ldr	r3, [pc, #260]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
	hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS2;
 8000f28:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8000f30:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
	hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
	hxspi2.Init.MaxTran = 0;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	@ 0x34
	hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000f44:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30

	hxspi2.Init.ChipSelectHighTimeCycle = 2;	//CS High Time = 6ns
 8000f4a:	4b37      	ldr	r3, [pc, #220]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	615a      	str	r2, [r3, #20]
	hxspi2.Init.ClockPrescaler = 2-1;		//(180 MHz) Input Clock set to 180MHz
 8000f50:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
	hxspi2.Init.Refresh = 700;		//Chip Select maximum low time = 4us
 8000f56:	4b34      	ldr	r3, [pc, #208]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f58:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38

	if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 8000f5e:	4832      	ldr	r0, [pc, #200]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f60:	f002 ff58 	bl	8003e14 <HAL_XSPI_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_XSPI2_Init+0x23e>
	{
		Error_Handler();
 8000f6a:	f7ff fb66 	bl	800063a <Error_Handler>
	}

	sHyperBusCfg.RWRecoveryTimeCycle = 7;	//(6.3 cycles at 180MHz) Read-write recovery time = 35ns
 8000f6e:	2307      	movs	r3, #7
 8000f70:	647b      	str	r3, [r7, #68]	@ 0x44
	sHyperBusCfg.AccessTimeCycle = 7;		//(6.3 cycles at 180MHz) Access time = 35ns
 8000f72:	2307      	movs	r3, #7
 8000f74:	64bb      	str	r3, [r7, #72]	@ 0x48
	sHyperBusCfg.WriteZeroLatency = HAL_XSPI_LATENCY_ON_WRITE;	//No Latency on write for register config
 8000f76:	2300      	movs	r3, #0
 8000f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sHyperBusCfg.LatencyMode = HAL_XSPI_FIXED_LATENCY;		//Latency Fixed for initial access
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_XSPI_HyperbusCfg(&hxspi2, &sHyperBusCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f7e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f86:	4619      	mov	r1, r3
 8000f88:	4827      	ldr	r0, [pc, #156]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000f8a:	f003 f8e2 	bl	8004152 <HAL_XSPI_HyperbusCfg>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_XSPI2_Init+0x268>
	{
	Error_Handler();
 8000f94:	f7ff fb51 	bl	800063a <Error_Handler>
	}


	cmd.AddressSpace = HAL_XSPI_REGISTER_ADDRESS_SPACE;
 8000f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8000f9e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
	cmd.DQSMode = HAL_XSPI_DQS_ENABLE;
 8000fa4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	cmd.DataLength = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.DataMode = HAL_XSPI_DATA_8_LINES;
 8000fae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000fb2:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t rx_data[2];

	cmd.Address = S27KS0642_CR0*2;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 8000fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4818      	ldr	r0, [pc, #96]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000fc6:	f003 f907 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_XSPI2_Init+0x2a4>
		Error_Handler();
 8000fd0:	f7ff fb33 	bl	800063a <Error_Handler>
	}

	if (HAL_XSPI_Receive(&hxspi2, rx_data, S27KS0642_TIMEOUT) != HAL_OK){
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4812      	ldr	r0, [pc, #72]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8000fe0:	f003 f9db 	bl	800439a <HAL_XSPI_Receive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_XSPI2_Init+0x2be>
		Error_Handler();
 8000fea:	f7ff fb26 	bl	800063a <Error_Handler>
	}
	rx = rx_data[0] | rx_data[1] << 8;
 8000fee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62


	cmd.Address = S27KS0642_CR1*2;
 8001006:	f241 0302 	movw	r3, #4098	@ 0x1002
 800100a:	633b      	str	r3, [r7, #48]	@ 0x30

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 800100c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001010:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_XSPI2_Init+0x2f8>)
 8001018:	f003 f8de 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <MX_XSPI2_Init+0x300>
		Error_Handler();
 8001022:	f7ff fb0a 	bl	800063a <Error_Handler>
 8001026:	e003      	b.n	8001030 <MX_XSPI2_Init+0x300>
 8001028:	24000088 	.word	0x24000088
 800102c:	5200a000 	.word	0x5200a000
	}

	if (HAL_XSPI_Receive(&hxspi2, rx_data, S27KS0642_TIMEOUT) != HAL_OK){
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001038:	4619      	mov	r1, r3
 800103a:	4854      	ldr	r0, [pc, #336]	@ (800118c <MX_XSPI2_Init+0x45c>)
 800103c:	f003 f9ad 	bl	800439a <HAL_XSPI_Receive>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_XSPI2_Init+0x31a>
		Error_Handler();
 8001046:	f7ff faf8 	bl	800063a <Error_Handler>
	}
	rx = rx_data[0] | rx_data[1] << 8;
 800104a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800104e:	b21a      	sxth	r2, r3
 8001050:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001054:	b21b      	sxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62



	cmd.Address = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
	cmd.AddressSpace = HAL_XSPI_MEMORY_ADDRESS_SPACE;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 800106a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
	cmd.DQSMode = HAL_XSPI_DQS_ENABLE;
 8001070:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
	cmd.DataLength = 10;
 8001076:	230a      	movs	r3, #10
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.DataMode = HAL_XSPI_DATA_8_LINES;
 800107a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800107e:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t tx_array[10];
	for (uint8_t i = 0; i < 10; i++){
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001086:	e00e      	b.n	80010a6 <MX_XSPI2_Init+0x376>
		tx_array[i] = i+100;
 8001088:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800108c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001090:	3264      	adds	r2, #100	@ 0x64
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	3368      	adds	r3, #104	@ 0x68
 8001096:	443b      	add	r3, r7
 8001098:	f803 2c50 	strb.w	r2, [r3, #-80]
	for (uint8_t i = 0; i < 10; i++){
 800109c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80010a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d9ec      	bls.n	8001088 <MX_XSPI2_Init+0x358>
	}

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 80010ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010b6:	4619      	mov	r1, r3
 80010b8:	4834      	ldr	r0, [pc, #208]	@ (800118c <MX_XSPI2_Init+0x45c>)
 80010ba:	f003 f88d 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_XSPI2_Init+0x398>
		Error_Handler();
 80010c4:	f7ff fab9 	bl	800063a <Error_Handler>
	}

	if (HAL_XSPI_Transmit(&hxspi2, tx_array, S27KS0642_TIMEOUT) != HAL_OK){
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010d0:	4619      	mov	r1, r3
 80010d2:	482e      	ldr	r0, [pc, #184]	@ (800118c <MX_XSPI2_Init+0x45c>)
 80010d4:	f003 f8ee 	bl	80042b4 <HAL_XSPI_Transmit>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_XSPI2_Init+0x3b2>
		Error_Handler();
 80010de:	f7ff faac 	bl	800063a <Error_Handler>
	}

	cmd.Address = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
	cmd.AddressSpace = HAL_XSPI_MEMORY_ADDRESS_SPACE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80010ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010ee:	637b      	str	r3, [r7, #52]	@ 0x34
	cmd.DQSMode = HAL_XSPI_DQS_ENABLE;
 80010f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	cmd.DataLength = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.DataMode = HAL_XSPI_DATA_8_LINES;
 80010fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t rx_array[10];

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 8001100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001104:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001108:	4619      	mov	r1, r3
 800110a:	4820      	ldr	r0, [pc, #128]	@ (800118c <MX_XSPI2_Init+0x45c>)
 800110c:	f003 f864 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_XSPI2_Init+0x3ea>
		Error_Handler();
 8001116:	f7ff fa90 	bl	800063a <Error_Handler>
	}

	if (HAL_XSPI_Receive(&hxspi2, rx_array, S27KS0642_TIMEOUT) != HAL_OK){
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001122:	4619      	mov	r1, r3
 8001124:	4819      	ldr	r0, [pc, #100]	@ (800118c <MX_XSPI2_Init+0x45c>)
 8001126:	f003 f938 	bl	800439a <HAL_XSPI_Receive>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_XSPI2_Init+0x404>
		Error_Handler();
 8001130:	f7ff fa83 	bl	800063a <Error_Handler>

	//Enabling Memory mapped Mode

	XSPI_MemoryMappedTypeDef sMemMappedCfg;

	cmd.Address = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
	cmd.AddressSpace = HAL_XSPI_MEMORY_ADDRESS_SPACE;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800113c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
	cmd.DQSMode = HAL_XSPI_DQS_ENABLE;
 8001142:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
	cmd.DataLength = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.DataMode = HAL_XSPI_DATA_8_LINES;
 800114c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001150:	643b      	str	r3, [r7, #64]	@ 0x40

	if (HAL_XSPI_HyperbusCmd(&hxspi2, &cmd, S27KS0642_TIMEOUT) != HAL_OK){
 8001152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001156:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	@ (800118c <MX_XSPI2_Init+0x45c>)
 800115e:	f003 f83b 	bl	80041d8 <HAL_XSPI_HyperbusCmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_XSPI2_Init+0x43c>
		Error_Handler();
 8001168:	f7ff fa67 	bl	800063a <Error_Handler>
	}

	sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]

	if (HAL_XSPI_MemoryMapped(&hxspi2, &sMemMappedCfg) != HAL_OK){
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_XSPI2_Init+0x45c>)
 8001176:	f003 fa3d 	bl	80045f4 <HAL_XSPI_MemoryMapped>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_XSPI2_Init+0x454>
		Error_Handler();
 8001180:	f7ff fa5b 	bl	800063a <Error_Handler>



  /* USER CODE END XSPI2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3768      	adds	r7, #104	@ 0x68
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000088 	.word	0x24000088

08001190 <HAL_XSPI_MspInit>:

static uint32_t HAL_RCC_XSPIM_CLK_ENABLED=0;

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0b0      	sub	sp, #192	@ 0xc0
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ac:	2284      	movs	r2, #132	@ 0x84
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f825 	bl	8005200 <memset>
  if(xspiHandle->Instance==XSPI1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001368 <HAL_XSPI_MspInit+0x1d8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d175      	bne.n	80012ac <HAL_XSPI_MspInit+0x11c>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 ff09 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 80011d8:	f7ff fa2f 	bl	800063a <Error_Handler>
    }

    /* XSPI1 clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
 80011dc:	4b63      	ldr	r3, [pc, #396]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a62      	ldr	r2, [pc, #392]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80011e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
 80011e6:	4b61      	ldr	r3, [pc, #388]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10c      	bne.n	8001208 <HAL_XSPI_MspInit+0x78>
      __HAL_RCC_XSPIM_CLK_ENABLE();
 80011ee:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 80011f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80011f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80011fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001200:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
 8001208:	4b59      	ldr	r3, [pc, #356]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800120a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800120e:	4a58      	ldr	r2, [pc, #352]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001218:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800121a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOP_CLK_ENABLE();
 8001222:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001224:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001228:	4a51      	ldr	r2, [pc, #324]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800122a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001232:	4b4f      	ldr	r3, [pc, #316]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001234:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOO_CLK_ENABLE();
 800123c:	4b4c      	ldr	r3, [pc, #304]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800123e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001242:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800124c:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800124e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
    PO4     ------> XSPIM_P1_CLK
    PP0     ------> XSPIM_P1_IO0
    PP1     ------> XSPIM_P1_IO1
    PO0     ------> XSPIM_P1_NCS1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8001256:	230f      	movs	r3, #15
 8001258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
 800126e:	2309      	movs	r3, #9
 8001270:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
 8001274:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001278:	4619      	mov	r1, r3
 800127a:	483e      	ldr	r0, [pc, #248]	@ (8001374 <HAL_XSPI_MspInit+0x1e4>)
 800127c:	f000 fc4e 	bl	8001b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0;
 8001280:	2311      	movs	r3, #17
 8001282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
 8001298:	2309      	movs	r3, #9
 800129a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
 800129e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012a2:	4619      	mov	r1, r3
 80012a4:	4834      	ldr	r0, [pc, #208]	@ (8001378 <HAL_XSPI_MspInit+0x1e8>)
 80012a6:	f000 fc39 	bl	8001b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }
}
 80012aa:	e058      	b.n	800135e <HAL_XSPI_MspInit+0x1ce>
  else if(xspiHandle->Instance==XSPI2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a32      	ldr	r2, [pc, #200]	@ (800137c <HAL_XSPI_MspInit+0x1ec>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d153      	bne.n	800135e <HAL_XSPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 80012b6:	2304      	movs	r3, #4
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2T;
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fe8e 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_XSPI_MspInit+0x142>
      Error_Handler();
 80012ce:	f7ff f9b4 	bl	800063a <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a24      	ldr	r2, [pc, #144]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80012da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_XSPI_MspInit+0x1dc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10c      	bne.n	80012fe <HAL_XSPI_MspInit+0x16e>
      __HAL_RCC_XSPIM_CLK_ENABLE();
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 80012e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80012ea:	4a21      	ldr	r2, [pc, #132]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 80012f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001300:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001304:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001306:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001310:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPION_CLK_ENABLE();
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800131a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 8001320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001324:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_XSPI_MspInit+0x1e0>)
 800132a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8001332:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 800134c:	2309      	movs	r3, #9
 800134e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 8001352:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001356:	4619      	mov	r1, r3
 8001358:	4809      	ldr	r0, [pc, #36]	@ (8001380 <HAL_XSPI_MspInit+0x1f0>)
 800135a:	f000 fbdf 	bl	8001b1c <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	37c0      	adds	r7, #192	@ 0xc0
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	52005000 	.word	0x52005000
 800136c:	240000e8 	.word	0x240000e8
 8001370:	58024400 	.word	0x58024400
 8001374:	58023c00 	.word	0x58023c00
 8001378:	58023800 	.word	0x58023800
 800137c:	5200a000 	.word	0x5200a000
 8001380:	58023400 	.word	0x58023400

08001384 <HAL_XSPI_MspDeInit>:

void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* xspiHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  if(xspiHandle->Instance==XSPI1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a2b      	ldr	r2, [pc, #172]	@ (8001440 <HAL_XSPI_MspDeInit+0xbc>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d121      	bne.n	80013da <HAL_XSPI_MspDeInit+0x56>
  {
  /* USER CODE BEGIN XSPI1_MspDeInit 0 */

  /* USER CODE END XSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_XSPIM_CLK_ENABLED--;
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3b01      	subs	r3, #1
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 800139e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==0){
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_XSPI_MspDeInit+0x34>
      __HAL_RCC_XSPIM_CLK_DISABLE();
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80013ae:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013b4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    }
    __HAL_RCC_XSPI1_CLK_DISABLE();
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80013be:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013c0:	f023 0320 	bic.w	r3, r3, #32
 80013c4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    PO4     ------> XSPIM_P1_CLK
    PP0     ------> XSPIM_P1_IO0
    PP1     ------> XSPIM_P1_IO1
    PO0     ------> XSPIM_P1_NCS1
    */
    HAL_GPIO_DeInit(GPIOP, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1);
 80013c8:	210f      	movs	r1, #15
 80013ca:	4820      	ldr	r0, [pc, #128]	@ (800144c <HAL_XSPI_MspDeInit+0xc8>)
 80013cc:	f000 fd06 	bl	8001ddc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOO, GPIO_PIN_4|GPIO_PIN_0);
 80013d0:	2111      	movs	r1, #17
 80013d2:	481f      	ldr	r0, [pc, #124]	@ (8001450 <HAL_XSPI_MspDeInit+0xcc>)
 80013d4:	f000 fd02 	bl	8001ddc <HAL_GPIO_DeInit>
  __HAL_RCC_XSPI2_FORCE_RESET();
  __HAL_RCC_XSPI2_RELEASE_RESET();

  /* USER CODE END XSPI2_MspDeInit 1 */
  }
}
 80013d8:	e02e      	b.n	8001438 <HAL_XSPI_MspDeInit+0xb4>
  else if(xspiHandle->Instance==XSPI2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <HAL_XSPI_MspDeInit+0xd0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d129      	bne.n	8001438 <HAL_XSPI_MspDeInit+0xb4>
    HAL_RCC_XSPIM_CLK_ENABLED--;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 80013ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==0){
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_XSPI_MspDeInit+0xc0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_XSPI_MspDeInit+0x82>
      __HAL_RCC_XSPIM_CLK_DISABLE();
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 80013fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001402:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_XSPI2_CLK_DISABLE();
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 8001408:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800140c:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 800140e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001412:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    HAL_GPIO_DeInit(GPION, GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8001416:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800141a:	480f      	ldr	r0, [pc, #60]	@ (8001458 <HAL_XSPI_MspDeInit+0xd4>)
 800141c:	f000 fcde 	bl	8001ddc <HAL_GPIO_DeInit>
  __HAL_RCC_XSPI2_FORCE_RESET();
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 8001422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 8001426:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800142a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  __HAL_RCC_XSPI2_RELEASE_RESET();
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 800142e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_XSPI_MspDeInit+0xc4>)
 8001432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001436:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	52005000 	.word	0x52005000
 8001444:	240000e8 	.word	0x240000e8
 8001448:	58024400 	.word	0x58024400
 800144c:	58023c00 	.word	0x58023c00
 8001450:	58023800 	.word	0x58023800
 8001454:	5200a000 	.word	0x5200a000
 8001458:	58023400 	.word	0x58023400

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001460:	f7ff f972 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopForever+0x6>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopForever+0xe>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopForever+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f003 fec1 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7fe ff91 	bl	80003b4 <main>

08001492 <LoopForever>:

LoopForever:
  b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   r0, =_estack
 8001494:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001498:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800149c:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 80014a0:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 80014a4:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 80014a8:	24000108 	.word	0x24000108

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>

080014ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f9e5 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f80e 	bl	80014e0 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e001      	b.n	80014d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d0:	f7ff f8c0 	bl	8000654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_InitTick+0x6c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <HAL_InitTick+0x70>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_InitTick+0x6c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f9e1 	bl	80018d2 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d809      	bhi.n	8001530 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001524:	f000 f9bb 	bl	800189e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_InitTick+0x74>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e007      	b.n	8001540 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e004      	b.n	8001540 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e001      	b.n	8001540 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000008 	.word	0x24000008
 8001550:	24000000 	.word	0x24000000
 8001554:	24000004 	.word	0x24000004

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	24000008 	.word	0x24000008
 800157c:	240000ec 	.word	0x240000ec

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	240000ec 	.word	0x240000ec

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000008 	.word	0x24000008

080015e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_SuspendTick+0x1c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_SuspendTick+0x1c>)
 80015ea:	f023 0302 	bic.w	r3, r3, #2
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_SBS_EnableCompensationCell+0x24>)
 800160a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800160e:	4905      	ldr	r1, [pc, #20]	@ (8001624 <HAL_SBS_EnableCompensationCell+0x24>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4313      	orrs	r3, r2
 8001614:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	58000400 	.word	0x58000400

08001628 <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 8001632:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf14      	ite	ne
 800163e:	2301      	movne	r3, #1
 8001640:	2300      	moveq	r3, #0
 8001642:	b2db      	uxtb	r3, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	58000400 	.word	0x58000400

08001654 <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d121      	bne.n	80016ac <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d006      	beq.n	800167c <HAL_SBS_ConfigCompensationCell+0x28>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b04      	cmp	r3, #4
 8001672:	d101      	bne.n	8001678 <HAL_SBS_ConfigCompensationCell+0x24>
 8001674:	2308      	movs	r3, #8
 8001676:	e002      	b.n	800167e <HAL_SBS_ConfigCompensationCell+0x2a>
 8001678:	2310      	movs	r3, #16
 800167a:	e000      	b.n	800167e <HAL_SBS_ConfigCompensationCell+0x2a>
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8001682:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8001686:	21ff      	movs	r1, #255	@ 0xff
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	401a      	ands	r2, r3
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4099      	lsls	r1, r3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3304      	adds	r3, #4
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	fa00 f303 	lsl.w	r3, r0, r3
 80016a2:	430b      	orrs	r3, r1
 80016a4:	4914      	ldr	r1, [pc, #80]	@ (80016f8 <HAL_SBS_ConfigCompensationCell+0xa4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_SBS_ConfigCompensationCell+0xa4>)
 80016ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	613b      	str	r3, [r7, #16]
  return result;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 80016d0:	2320      	movs	r3, #32
 80016d2:	e003      	b.n	80016dc <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4904      	ldr	r1, [pc, #16]	@ (80016f8 <HAL_SBS_ConfigCompensationCell+0xa4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 80016ec:	bf00      	nop
 80016ee:	3724      	adds	r7, #36	@ 0x24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	58000400 	.word	0x58000400

080016fc <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8001706:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800170a:	4905      	ldr	r1, [pc, #20]	@ (8001720 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff47 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff5e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffb2 	bl	8001844 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80018f4:	f3bf 8f5f 	dmb	sy
}
 80018f8:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <HAL_MPU_Enable+0x3c>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_MPU_Enable+0x40>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_MPU_Enable+0x40>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed90 	.word	0xe000ed90
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001934:	f3bf 8f5f 	dmb	sy
}
 8001938:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_MPU_Disable+0x34>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <HAL_MPU_Disable+0x34>)
 8001940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001944:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_MPU_Disable+0x38>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
}
 8001950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001952:	f3bf 8f6f 	isb	sy
}
 8001956:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	e000ed90 	.word	0xe000ed90

0800196c <HAL_MPU_DisableRegion>:
/**
  * @brief  Disable the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
 8001974:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_MPU_DisableRegion+0x28>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_MPU_DisableRegion+0x28>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <HAL_MPU_DisableRegion+0x28>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6113      	str	r3, [r2, #16]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed90 	.word	0xe000ed90

08001998 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	785a      	ldrb	r2, [r3, #1]
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019a6:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 80019c0:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7b1b      	ldrb	r3, [r3, #12]
 80019cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7adb      	ldrb	r3, [r3, #11]
 80019d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80019d4:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7a9b      	ldrb	r3, [r3, #10]
 80019da:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 80019dc:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7b5b      	ldrb	r3, [r3, #13]
 80019e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 80019e4:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7b9b      	ldrb	r3, [r3, #14]
 80019ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 80019ec:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7bdb      	ldrb	r3, [r3, #15]
 80019f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 80019f4:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7a5b      	ldrb	r3, [r3, #9]
 80019fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 80019fc:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7a1b      	ldrb	r3, [r3, #8]
 8001a02:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8001a04:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001a0e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001a10:	6113      	str	r3, [r2, #16]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed90 	.word	0xe000ed90

08001a24 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001a2c:	f7ff fda8 	bl	8001580 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e06b      	b.n	8001b14 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d008      	beq.n	8001a5a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e05c      	b.n	8001b14 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0204 	orr.w	r2, r2, #4
 8001a68:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001a72:	e020      	b.n	8001ab6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001a74:	f7ff fd84 	bl	8001580 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d919      	bls.n	8001ab6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e02e      	b.n	8001b14 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0d7      	beq.n	8001a74 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0202 	orr.w	r2, r2, #2
 8001ad2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001ae4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001afe:	2201      	movs	r2, #1
 8001b00:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	e143      	b.n	8001db4 <HAL_GPIO_Init+0x298>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8135 	beq.w	8001dae <HAL_GPIO_Init+0x292>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d005      	beq.n	8001b5c <HAL_GPIO_Init+0x40>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d130      	bne.n	8001bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b92:	2201      	movs	r2, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 0201 	and.w	r2, r3, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d109      	bne.n	8001bde <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d11b      	bne.n	8001c0e <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	6939      	ldr	r1, [r7, #16]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8085 	beq.w	8001dae <HAL_GPIO_Init+0x292>
      {
        temp = SBS->EXTICR[position >> 2u];
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd4 <HAL_GPIO_Init+0x2b8>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	334c      	adds	r3, #76	@ 0x4c
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0a9a      	lsrs	r2, r3, #10
 8001ccc:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <HAL_GPIO_Init+0x2bc>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001ce0:	493c      	ldr	r1, [pc, #240]	@ (8001dd4 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	334c      	adds	r3, #76	@ 0x4c
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x1f8>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f aeb4 	bne.w	8001b2c <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	58000400 	.word	0x58000400
 8001dd8:	0029ff7f 	.word	0x0029ff7f

08001ddc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001dea:	e0a8      	b.n	8001f3e <HAL_GPIO_DeInit+0x162>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001dec:	2201      	movs	r2, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 809b 	beq.w	8001f38 <HAL_GPIO_DeInit+0x15c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SBS->EXTICR[position >> 2u];
 8001e02:	4a56      	ldr	r2, [pc, #344]	@ (8001f5c <HAL_GPIO_DeInit+0x180>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	334c      	adds	r3, #76	@ 0x4c
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0a9a      	lsrs	r2, r3, #10
 8001e28:	4b4d      	ldr	r3, [pc, #308]	@ (8001f60 <HAL_GPIO_DeInit+0x184>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d13e      	bne.n	8001eba <HAL_GPIO_DeInit+0xde>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e40:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e62:	4013      	ands	r3, r2
 8001e64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e76:	4013      	ands	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e88:	4013      	ands	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

        /* Clear EXTICR configuration */
        tmp = 0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
        SBS->EXTICR[position >> 2u] &= ~tmp;
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f5c <HAL_GPIO_DeInit+0x180>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	334c      	adds	r3, #76	@ 0x4c
 8001ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	482b      	ldr	r0, [pc, #172]	@ (8001f5c <HAL_GPIO_DeInit+0x180>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	334c      	adds	r3, #76	@ 0x4c
 8001eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	08d2      	lsrs	r2, r2, #3
 8001eee:	4019      	ands	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2103      	movs	r1, #3
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	2101      	movs	r1, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f af50 	bne.w	8001dec <HAL_GPIO_DeInit+0x10>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	58000400 	.word	0x58000400
 8001f60:	0029ff7f 	.word	0x0029ff7f

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d00a      	beq.n	8001fbe <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e038      	b.n	800202c <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e036      	b.n	800202c <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 021f 	bic.w	r2, r3, #31
 8001fc6:	491b      	ldr	r1, [pc, #108]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fce:	f7ff fad7 	bl	8001580 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001fd4:	e009      	b.n	8001fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fd6:	f7ff fad3 	bl	8001580 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fe4:	d901      	bls.n	8001fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e020      	b.n	800202c <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b1e      	cmp	r3, #30
 8001ffa:	d002      	beq.n	8002002 <HAL_PWREx_ConfigSupply+0x6e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b1d      	cmp	r3, #29
 8002000:	d113      	bne.n	800202a <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 8002002:	f7ff fabd 	bl	8001580 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8002008:	e009      	b.n	800201e <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 800200a:	f7ff fab9 	bl	8001580 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002018:	d901      	bls.n	800201e <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e006      	b.n	800202c <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_PWREx_ConfigSupply+0xa0>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ef      	beq.n	800200a <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024800 	.word	0x58024800

08002038 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8002040:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f023 0201 	bic.w	r2, r3, #1
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff fa96 	bl	8001580 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8002056:	e009      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002058:	f7ff fa92 	bl	8001580 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002066:	d901      	bls.n	800206c <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e006      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ef      	beq.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	58024800 	.word	0x58024800

08002088 <HAL_PWREx_EnableXSPIM1>:
  * @note   The XSPIM_P1 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM1(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM1);
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_PWREx_EnableXSPIM1+0x1c>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <HAL_PWREx_EnableXSPIM1+0x1c>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	58024800 	.word	0x58024800

080020a8 <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_PWREx_EnableXSPIM2+0x1c>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_PWREx_EnableXSPIM2+0x1c>)
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	58024800 	.word	0x58024800

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e328      	b.n	800272c <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b97      	ldr	r3, [pc, #604]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e2:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b94      	ldr	r3, [pc, #592]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 80020ee:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 80020f6:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 809c 	beq.w	800223e <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x50>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 808e 	bne.w	800223e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e302      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x76>
 8002130:	4b81      	ldr	r3, [pc, #516]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a80      	ldr	r2, [pc, #512]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e058      	b.n	80021f0 <HAL_RCC_OscConfig+0x128>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d112      	bne.n	800216c <HAL_RCC_OscConfig+0xa4>
 8002146:	4b7c      	ldr	r3, [pc, #496]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7b      	ldr	r2, [pc, #492]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 800214c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b79      	ldr	r3, [pc, #484]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a78      	ldr	r2, [pc, #480]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002158:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b76      	ldr	r3, [pc, #472]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a75      	ldr	r2, [pc, #468]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e041      	b.n	80021f0 <HAL_RCC_OscConfig+0x128>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002174:	d112      	bne.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002176:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6f      	ldr	r2, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6d      	ldr	r3, [pc, #436]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6c      	ldr	r2, [pc, #432]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002188:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6a      	ldr	r3, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a69      	ldr	r2, [pc, #420]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e029      	b.n	80021f0 <HAL_RCC_OscConfig+0x128>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x104>
 80021a6:	4b64      	ldr	r3, [pc, #400]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a63      	ldr	r2, [pc, #396]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b61      	ldr	r3, [pc, #388]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a60      	ldr	r2, [pc, #384]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b5e      	ldr	r3, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e011      	b.n	80021f0 <HAL_RCC_OscConfig+0x128>
 80021cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a59      	ldr	r2, [pc, #356]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b54      	ldr	r3, [pc, #336]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a53      	ldr	r2, [pc, #332]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80021ea:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f9c6 	bl	8001580 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002200:	f7ff f9be 	bl	8001580 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e28c      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	4b49      	ldr	r3, [pc, #292]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x138>
 800221e:	e00e      	b.n	800223e <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002220:	f7ff f9ae 	bl	8001580 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e27c      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 809e 	beq.w	8002388 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x196>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d047      	beq.n	80022e8 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d144      	bne.n	80022e8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e260      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 800226a:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0318 	and.w	r3, r3, #24
 8002272:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x1c6>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e24e      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 800228e:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0219 	bic.w	r2, r3, #25
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	4a21      	ldr	r2, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x274>)
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_RCC_OscConfig+0x278>)
 80022bc:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_RCC_OscConfig+0x27c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f90c 	bl	80014e0 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e22c      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	4915      	ldr	r1, [pc, #84]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e04f      	b.n	8002388 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 0219 	bic.w	r2, r3, #25
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	430b      	orrs	r3, r1
 8002302:	490d      	ldr	r1, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <HAL_RCC_OscConfig+0x270>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f930 	bl	8001580 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002322:	e011      	b.n	8002348 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002324:	f7ff f92c 	bl	8001580 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d90a      	bls.n	8002348 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1fa      	b.n	800272c <HAL_RCC_OscConfig+0x664>
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
 800233c:	03d09000 	.word	0x03d09000
 8002340:	24000000 	.word	0x24000000
 8002344:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	4b95      	ldr	r3, [pc, #596]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0e7      	beq.n	8002324 <HAL_RCC_OscConfig+0x25c>
 8002354:	e018      	b.n	8002388 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b92      	ldr	r3, [pc, #584]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a91      	ldr	r2, [pc, #580]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff f90d 	bl	8001580 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800236a:	f7ff f909 	bl	8001580 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1d7      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800237c:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d045      	beq.n	8002420 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b08      	cmp	r3, #8
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2de>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d138      	bne.n	8002420 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1bc      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023ba:	4b79      	ldr	r3, [pc, #484]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a78      	ldr	r2, [pc, #480]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff f8db 	bl	8001580 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80023ce:	f7ff f8d7 	bl	8001580 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a5      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023e0:	4b6f      	ldr	r3, [pc, #444]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x306>
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023ee:	4b6c      	ldr	r3, [pc, #432]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6b      	ldr	r2, [pc, #428]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80023f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff f8c1 	bl	8001580 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002402:	f7ff f8bd 	bl	8001580 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e18b      	b.n	800272c <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002414:	4b62      	ldr	r3, [pc, #392]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d036      	beq.n	800249a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d019      	beq.n	8002468 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002434:	4b5a      	ldr	r3, [pc, #360]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002438:	4a59      	ldr	r2, [pc, #356]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff f89e 	bl	8001580 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002448:	f7ff f89a 	bl	8001580 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e168      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245a:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x380>
 8002466:	e018      	b.n	800249a <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b4d      	ldr	r3, [pc, #308]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246c:	4a4c      	ldr	r2, [pc, #304]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7ff f884 	bl	8001580 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800247c:	f7ff f880 	bl	8001580 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e14e      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248e:	4b44      	ldr	r3, [pc, #272]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d019      	beq.n	80024e2 <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024ae:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80024b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024ba:	f7ff f861 	bl	8001580 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80024c2:	f7ff f85d 	bl	8001580 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e12b      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024d4:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3fa>
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2e      	ldr	r2, [pc, #184]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 80024e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f847 	bl	8001580 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80024f6:	f7ff f843 	bl	8001580 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e111      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 809b 	beq.w	8002658 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_RCC_OscConfig+0x4dc>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x47c>
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
 8002542:	e05a      	b.n	80025fa <HAL_RCC_OscConfig+0x532>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x4aa>
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002550:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	@ 0x70
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800255e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002562:	6713      	str	r3, [r2, #112]	@ 0x70
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800256a:	f023 0304 	bic.w	r3, r3, #4
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	e043      	b.n	80025fa <HAL_RCC_OscConfig+0x532>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4e0>
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6713      	str	r3, [r2, #112]	@ 0x70
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 800258c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002590:	6713      	str	r3, [r2, #112]	@ 0x70
 8002592:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	4a02      	ldr	r2, [pc, #8]	@ (80025a0 <HAL_RCC_OscConfig+0x4d8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	@ 0x70
 800259e:	e02c      	b.n	80025fa <HAL_RCC_OscConfig+0x532>
 80025a0:	58024400 	.word	0x58024400
 80025a4:	58024800 	.word	0x58024800
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b85      	cmp	r3, #133	@ 0x85
 80025ae:	d112      	bne.n	80025d6 <HAL_RCC_OscConfig+0x50e>
 80025b0:	4b60      	ldr	r3, [pc, #384]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a59      	ldr	r2, [pc, #356]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e011      	b.n	80025fa <HAL_RCC_OscConfig+0x532>
 80025d6:	4b57      	ldr	r3, [pc, #348]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	4a56      	ldr	r2, [pc, #344]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e2:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a53      	ldr	r2, [pc, #332]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	4b51      	ldr	r3, [pc, #324]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a50      	ldr	r2, [pc, #320]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80025f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe ffbd 	bl	8001580 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe ffb9 	bl	8001580 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e085      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	4b44      	ldr	r3, [pc, #272]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x542>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe ffa7 	bl	8001580 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe ffa3 	bl	8001580 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e06f      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d042      	beq.n	80026e6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b18      	cmp	r3, #24
 8002664:	d131      	bne.n	80026ca <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e05c      	b.n	800272c <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 8002672:	4b30      	ldr	r3, [pc, #192]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 8002674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800267c:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d02e      	beq.n	80026e6 <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 8002688:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	4a29      	ldr	r2, [pc, #164]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002694:	f7fe ff74 	bl	8001580 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800269a:	bf00      	nop
 800269c:	f7fe ff70 	bl	8001580 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d0f9      	beq.n	800269c <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80026a8:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80026aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ac:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_RCC_OscConfig+0x670>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026b4:	00d2      	lsls	r2, r2, #3
 80026b6:	491f      	ldr	r1, [pc, #124]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <HAL_RCC_OscConfig+0x66c>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80026c8:	e00d      	b.n	80026e6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3324      	adds	r3, #36	@ 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 fb2e 	bl	8002d38 <RCC_PLL_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e022      	b.n	800272c <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	334c      	adds	r3, #76	@ 0x4c
 80026f2:	4619      	mov	r1, r3
 80026f4:	2001      	movs	r0, #1
 80026f6:	f000 fb1f 	bl	8002d38 <RCC_PLL_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e013      	b.n	800272c <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3374      	adds	r3, #116	@ 0x74
 8002718:	4619      	mov	r1, r3
 800271a:	2002      	movs	r0, #2
 800271c:	f000 fb0c 	bl	8002d38 <RCC_PLL_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	58024400 	.word	0x58024400
 8002738:	ffff0007 	.word	0xffff0007

0800273c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e182      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b8a      	ldr	r3, [pc, #552]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b87      	ldr	r3, [pc, #540]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002766:	4985      	ldr	r1, [pc, #532]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b83      	ldr	r3, [pc, #524]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e16a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b7b      	ldr	r3, [pc, #492]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800279c:	4b78      	ldr	r3, [pc, #480]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f023 0207 	bic.w	r2, r3, #7
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4975      	ldr	r1, [pc, #468]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b70      	ldr	r3, [pc, #448]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	496a      	ldr	r1, [pc, #424]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b64      	ldr	r3, [pc, #400]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d908      	bls.n	800280a <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 80027f8:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	495e      	ldr	r1, [pc, #376]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b59      	ldr	r3, [pc, #356]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002822:	429a      	cmp	r2, r3
 8002824:	d908      	bls.n	8002838 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8002826:	4b56      	ldr	r3, [pc, #344]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4953      	ldr	r1, [pc, #332]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f023 020f 	bic.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4947      	ldr	r1, [pc, #284]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d055      	beq.n	800291e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002872:	4b43      	ldr	r3, [pc, #268]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f023 020f 	bic.w	r2, r3, #15
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4940      	ldr	r1, [pc, #256]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002880:	4313      	orrs	r3, r2
 8002882:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288c:	4b3c      	ldr	r3, [pc, #240]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0dc      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028a4:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d0      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80028bc:	4b30      	ldr	r3, [pc, #192]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0c4      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0bc      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f023 0207 	bic.w	r2, r3, #7
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ee:	f7fe fe47 	bl	8001580 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	e00a      	b.n	800290c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fe43 	bl	8001580 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0a4      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	429a      	cmp	r2, r3
 800291c:	d1eb      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	490e      	ldr	r1, [pc, #56]	@ (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002948:	4313      	orrs	r3, r2
 800294a:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d214      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002962:	4906      	ldr	r1, [pc, #24]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b04      	ldr	r3, [pc, #16]	@ (800297c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e06c      	b.n	8002a56 <HAL_RCC_ClockConfig+0x31a>
 800297c:	52002000 	.word	0x52002000
 8002980:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b32      	ldr	r3, [pc, #200]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	429a      	cmp	r2, r3
 800299e:	d208      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 0207 	bic.w	r2, r3, #7
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	492c      	ldr	r1, [pc, #176]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d208      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4921      	ldr	r1, [pc, #132]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 80029fc:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4915      	ldr	r1, [pc, #84]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d208      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	490a      	ldr	r1, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x324>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8002a3c:	f000 f816 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_RCC_ClockConfig+0x328>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <HAL_RCC_ClockConfig+0x32c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fd48 	bl	80014e0 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002a54:	7afb      	ldrb	r3, [r7, #11]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	24000000 	.word	0x24000000
 8002a68:	24000004 	.word	0x24000004

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b08b      	sub	sp, #44	@ 0x2c
 8002a70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a72:	4baa      	ldr	r3, [pc, #680]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7a:	2b18      	cmp	r3, #24
 8002a7c:	f200 8136 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x280>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002aed 	.word	0x08002aed
 8002a8c:	08002ced 	.word	0x08002ced
 8002a90:	08002ced 	.word	0x08002ced
 8002a94:	08002ced 	.word	0x08002ced
 8002a98:	08002ced 	.word	0x08002ced
 8002a9c:	08002ced 	.word	0x08002ced
 8002aa0:	08002ced 	.word	0x08002ced
 8002aa4:	08002ced 	.word	0x08002ced
 8002aa8:	08002b13 	.word	0x08002b13
 8002aac:	08002ced 	.word	0x08002ced
 8002ab0:	08002ced 	.word	0x08002ced
 8002ab4:	08002ced 	.word	0x08002ced
 8002ab8:	08002ced 	.word	0x08002ced
 8002abc:	08002ced 	.word	0x08002ced
 8002ac0:	08002ced 	.word	0x08002ced
 8002ac4:	08002ced 	.word	0x08002ced
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002ced 	.word	0x08002ced
 8002ad0:	08002ced 	.word	0x08002ced
 8002ad4:	08002ced 	.word	0x08002ced
 8002ad8:	08002ced 	.word	0x08002ced
 8002adc:	08002ced 	.word	0x08002ced
 8002ae0:	08002ced 	.word	0x08002ced
 8002ae4:	08002ced 	.word	0x08002ced
 8002ae8:	08002b1f 	.word	0x08002b1f
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002aec:	4b8b      	ldr	r3, [pc, #556]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002af8:	4b88      	ldr	r3, [pc, #544]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	4a87      	ldr	r2, [pc, #540]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8002b0a:	e0f2      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	e0ef      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b12:	4b84      	ldr	r3, [pc, #528]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002b14:	623b      	str	r3, [r7, #32]
      break;
 8002b16:	e0ec      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b18:	4b83      	ldr	r3, [pc, #524]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8002b1a:	623b      	str	r3, [r7, #32]
      break;
 8002b1c:	e0e9      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8002b28:	4b7c      	ldr	r3, [pc, #496]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b32:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b34:	4b79      	ldr	r3, [pc, #484]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8002b3e:	4b77      	ldr	r3, [pc, #476]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80c2 	beq.w	8002ce6 <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d064      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1c6>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f200 8083 	bhi.w	8002c76 <HAL_RCC_GetSysClockFreq+0x20a>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x112>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d038      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x182>
 8002b7c:	e07b      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002b7e:	4b67      	ldr	r3, [pc, #412]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02d      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b8a:	4b64      	ldr	r3, [pc, #400]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	4a62      	ldr	r2, [pc, #392]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb4:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8002bc8:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2c0>
 8002bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8002be4:	e069      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bec:	e065      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf8:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c00:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c10:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c14:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2c0>
 8002c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002c30:	e043      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002d34 <HAL_RCC_GetSysClockFreq+0x2c8>
 8002c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c44:	4b35      	ldr	r3, [pc, #212]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c54:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c58:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2c0>
 8002c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002c74:	e021      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c88:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c98:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c9c:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2c0>
 8002ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002cb8:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8002cba:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	0a5b      	lsrs	r3, r3, #9
 8002cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cd2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cde:	ee17 3a90 	vmov	r3, s15
 8002ce2:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002cee:	623b      	str	r3, [r7, #32]
      break;
 8002cf0:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d905      	bls.n	8002d0e <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3b07      	subs	r3, #7
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	372c      	adds	r7, #44	@ 0x2c
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	03d09000 	.word	0x03d09000
 8002d24:	003d0900 	.word	0x003d0900
 8002d28:	00989680 	.word	0x00989680
 8002d2c:	46000000 	.word	0x46000000
 8002d30:	4a742400 	.word	0x4a742400
 8002d34:	4b189680 	.word	0x4b189680

08002d38 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	00da      	lsls	r2, r3, #3
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fb8 <RCC_PLL_Config+0x280>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	4b99      	ldr	r3, [pc, #612]	@ (8002fbc <RCC_PLL_Config+0x284>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002d5c:	4b98      	ldr	r3, [pc, #608]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002d5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4a92      	ldr	r2, [pc, #584]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002d78:	400b      	ands	r3, r1
 8002d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002d7c:	4b90      	ldr	r3, [pc, #576]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	498c      	ldr	r1, [pc, #560]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d94:	f7fe fbf4 	bl	8001580 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002d9a:	e008      	b.n	8002dae <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fbf0 	bl	8001580 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b32      	cmp	r3, #50	@ 0x32
 8002da8:	d901      	bls.n	8002dae <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0ff      	b.n	8002fae <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002dae:	4b84      	ldr	r3, [pc, #528]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1eb      	bne.n	8002d9c <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	f040 80dd 	bne.w	8002f88 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002dda:	4b79      	ldr	r3, [pc, #484]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	4a77      	ldr	r2, [pc, #476]	@ (8002fc4 <RCC_PLL_Config+0x28c>)
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dec:	e007      	b.n	8002dfe <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d102      	bne.n	8002dfa <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8002df4:	4b74      	ldr	r3, [pc, #464]	@ (8002fc8 <RCC_PLL_Config+0x290>)
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	e001      	b.n	8002dfe <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 8002dfa:	4b74      	ldr	r3, [pc, #464]	@ (8002fcc <RCC_PLL_Config+0x294>)
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	4a70      	ldr	r2, [pc, #448]	@ (8002fd0 <RCC_PLL_Config+0x298>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d302      	bcc.n	8002e18 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002e12:	2318      	movs	r3, #24
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	e00f      	b.n	8002e38 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <RCC_PLL_Config+0x29c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d902      	bls.n	8002e26 <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002e20:	2310      	movs	r3, #16
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e24:	e008      	b.n	8002e38 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	4a6b      	ldr	r2, [pc, #428]	@ (8002fd8 <RCC_PLL_Config+0x2a0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d902      	bls.n	8002e34 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8002e2e:	2308      	movs	r3, #8
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e32:	e001      	b.n	8002e38 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002e34:	2302      	movs	r3, #2
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002e4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	f043 0303 	orr.w	r3, r3, #3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4099      	lsls	r1, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	4952      	ldr	r1, [pc, #328]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 8002e7a:	4b51      	ldr	r3, [pc, #324]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e090      	b.n	8002fae <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002e8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	221b      	movs	r2, #27
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	ea01 0203 	and.w	r2, r1, r3
 8002ea8:	4945      	ldr	r1, [pc, #276]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	4313      	orrs	r3, r2
 8002eae:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	025b      	lsls	r3, r3, #9
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8002ef2:	4b33      	ldr	r3, [pc, #204]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	4a32      	ldr	r2, [pc, #200]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01c      	beq.n	8002f40 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <RCC_PLL_Config+0x2a4>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b32      	ldr	r3, [pc, #200]	@ (8002fe0 <RCC_PLL_Config+0x2a8>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f1c:	00d2      	lsls	r2, r2, #3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002f24:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	2201      	movs	r2, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	4a21      	ldr	r2, [pc, #132]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	491b      	ldr	r1, [pc, #108]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f56:	f7fe fb13 	bl	8001580 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002f5c:	e008      	b.n	8002f70 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fb0f 	bl	8001580 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b32      	cmp	r3, #50	@ 0x32
 8002f6a:	d901      	bls.n	8002f70 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e01e      	b.n	8002fae <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0eb      	beq.n	8002f5e <RCC_PLL_Config+0x226>
 8002f86:	e010      	b.n	8002faa <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3304      	adds	r3, #4
 8002f92:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	f043 0303 	orr.w	r3, r3, #3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <RCC_PLL_Config+0x288>)
 8002fa4:	f043 0303 	orr.w	r3, r3, #3
 8002fa8:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 8002faa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3728      	adds	r7, #40	@ 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	58024430 	.word	0x58024430
 8002fbc:	580244c0 	.word	0x580244c0
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	03d09000 	.word	0x03d09000
 8002fc8:	00989680 	.word	0x00989680
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	007a1200 	.word	0x007a1200
 8002fd4:	003d08ff 	.word	0x003d08ff
 8002fd8:	001e847f 	.word	0x001e847f
 8002fdc:	58024434 	.word	0x58024434
 8002fe0:	ffff0007 	.word	0xffff0007

08002fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8081 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003002:	4b8c      	ldr	r3, [pc, #560]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300a:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d029      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	429a      	cmp	r2, r3
 800301e:	d022      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b85      	ldr	r3, [pc, #532]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a84      	ldr	r2, [pc, #528]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302a:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800302c:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
 800303c:	e013      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800303e:	4b7d      	ldr	r3, [pc, #500]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003046:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8003048:	4b7a      	ldr	r3, [pc, #488]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304c:	4a79      	ldr	r2, [pc, #484]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003052:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003054:	4b77      	ldr	r3, [pc, #476]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a76      	ldr	r2, [pc, #472]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 8003060:	4a74      	ldr	r2, [pc, #464]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d149      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003074:	d115      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fa83 	bl	8001580 <HAL_GetTick>
 800307a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307c:	e00b      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe fa7f 	bl	8001580 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d902      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	75fb      	strb	r3, [r7, #23]
            break;
 8003094:	e005      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	4b67      	ldr	r3, [pc, #412]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ed      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d128      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ac:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00c      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xea>
 80030b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c0:	0919      	lsrs	r1, r3, #4
 80030c2:	4b5e      	ldr	r3, [pc, #376]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c4:	400b      	ands	r3, r1
 80030c6:	495b      	ldr	r1, [pc, #364]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80030ce:	4b59      	ldr	r3, [pc, #356]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030d8:	6113      	str	r3, [r2, #16]
 80030da:	4b56      	ldr	r3, [pc, #344]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e6:	4953      	ldr	r1, [pc, #332]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 80030ec:	4b51      	ldr	r3, [pc, #324]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a50      	ldr	r2, [pc, #320]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f8:	e004      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	75bb      	strb	r3, [r7, #22]
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d030      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d819      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003153 	.word	0x08003153
 8003124:	08003131 	.word	0x08003131
 8003128:	0800313f 	.word	0x0800313f
 800312c:	08003153 	.word	0x08003153
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003130:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4a3f      	ldr	r2, [pc, #252]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800313a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800313c:	e00a      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 800313e:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a3c      	ldr	r2, [pc, #240]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800314a:	e003      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
        break;
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8003152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800315a:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4933      	ldr	r1, [pc, #204]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003168:	4313      	orrs	r3, r2
 800316a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800316c:	e001      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b20      	cmp	r3, #32
 8003184:	d00c      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8003186:	2b20      	cmp	r3, #32
 8003188:	d811      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800318e:	2b10      	cmp	r3, #16
 8003190:	d10d      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003192:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	4a27      	ldr	r2, [pc, #156]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800319c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 800319e:	e00a      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80031a0:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80031ac:	e003      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
        break;
 80031b2:	e000      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 80031b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 80031bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	491a      	ldr	r1, [pc, #104]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80031ce:	e001      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d031      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d00c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d811      	bhi.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80031f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8003200:	e00a      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	4a0b      	ldr	r2, [pc, #44]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003208:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
        break;
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8003216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d110      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4902      	ldr	r1, [pc, #8]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800322c:	4313      	orrs	r3, r2
 800322e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003230:	e008      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8003232:	bf00      	nop
 8003234:	58024400 	.word	0x58024400
 8003238:	58024800 	.word	0x58024800
 800323c:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003250:	4b93      	ldr	r3, [pc, #588]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003254:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	4990      	ldr	r1, [pc, #576]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d026      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003276:	2b04      	cmp	r3, #4
 8003278:	d007      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800327a:	e00d      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 800327c:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	4a87      	ldr	r2, [pc, #540]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003286:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8003288:	e009      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800328a:	4b85      	ldr	r3, [pc, #532]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	4a84      	ldr	r2, [pc, #528]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003294:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8003296:	e002      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
        break;
 800329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 80032a4:	4b7e      	ldr	r3, [pc, #504]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a8:	f023 0204 	bic.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	497b      	ldr	r1, [pc, #492]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80032b6:	e001      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d02e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d0:	d019      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80032d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d6:	d813      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80032dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e0:	d007      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80032e2:	e00d      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80032e4:	4b6e      	ldr	r3, [pc, #440]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	4a6d      	ldr	r2, [pc, #436]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 80032f0:	e00a      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80032f2:	4b6b      	ldr	r3, [pc, #428]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
        break;
 8003304:	e000      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8003306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330e:	4b64      	ldr	r3, [pc, #400]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4961      	ldr	r1, [pc, #388]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003320:	e001      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03f      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800333a:	d02a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800333c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003340:	d824      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003346:	d024      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800334c:	d81e      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800334e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003352:	d01e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003358:	d818      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800335a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800335e:	d00e      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003364:	d812      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800336a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800336e:	d10d      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 800337c:	e00a      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800337e:	4b48      	ldr	r3, [pc, #288]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	4a47      	ldr	r2, [pc, #284]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003388:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
        break;
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8003392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	493e      	ldr	r1, [pc, #248]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80033ac:	e001      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033be:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4935      	ldr	r1, [pc, #212]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 80033dc:	4b30      	ldr	r3, [pc, #192]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	492d      	ldr	r1, [pc, #180]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800340e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003412:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8003424:	4b1e      	ldr	r3, [pc, #120]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	491b      	ldr	r1, [pc, #108]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02f      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003450:	d00e      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003456:	d812      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003460:	d10d      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	4a0e      	ldr	r2, [pc, #56]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800346c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800346e:	e00a      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
        break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800348e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003490:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	4901      	ldr	r1, [pc, #4]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	650b      	str	r3, [r1, #80]	@ 0x50
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80034a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034bc:	d017      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034c2:	d811      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c8:	d011      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ce:	d80b      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d8:	d106      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80034da:	4b97      	ldr	r3, [pc, #604]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	4a96      	ldr	r2, [pc, #600]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80034e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 80034e6:	e003      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
        break;
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 80034f6:	4b90      	ldr	r3, [pc, #576]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	498d      	ldr	r1, [pc, #564]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003504:	4313      	orrs	r3, r2
 8003506:	650b      	str	r3, [r1, #80]	@ 0x50
 8003508:	e001      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02c      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003522:	d017      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003528:	d811      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800352a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352e:	d011      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003534:	d80b      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800353a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353e:	d106      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003540:	4b7d      	ldr	r3, [pc, #500]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	4a7c      	ldr	r2, [pc, #496]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003546:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800354a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
        break;
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8003554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 800355c:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800355e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	4973      	ldr	r1, [pc, #460]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800356a:	4313      	orrs	r3, r2
 800356c:	650b      	str	r3, [r1, #80]	@ 0x50
 800356e:	e001      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d045      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003588:	d02a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800358a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800358e:	d824      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8003590:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003594:	d026      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003596:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800359a:	d81e      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800359c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035a0:	d022      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80035a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035a6:	d818      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ac:	d00e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80035ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035b2:	d812      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d019      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d10d      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80035be:	4b5e      	ldr	r3, [pc, #376]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035ca:	e010      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80035cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	4a59      	ldr	r2, [pc, #356]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80035d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035d8:	e009      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
        break;
 80035de:	e006      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80035e0:	bf00      	nop
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80035e4:	bf00      	nop
 80035e6:	e002      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f4:	4b50      	ldr	r3, [pc, #320]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003600:	494d      	ldr	r1, [pc, #308]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003602:	4313      	orrs	r3, r2
 8003604:	650b      	str	r3, [r1, #80]	@ 0x50
 8003606:	e001      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d045      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003620:	d02a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8003622:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003626:	d824      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362c:	d026      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x698>
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d81e      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003638:	d022      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800363a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363e:	d818      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003644:	d00e      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364a:	d812      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d019      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8003650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003654:	d10d      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003662:	e010      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800366a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800366e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003670:	e009      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
        break;
 8003676:	e006      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003678:	bf00      	nop
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	4927      	ldr	r1, [pc, #156]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800369a:	4313      	orrs	r3, r2
 800369c:	658b      	str	r3, [r1, #88]	@ 0x58
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d047      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036b8:	d02a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80036ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036be:	d824      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c4:	d026      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x730>
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ca:	d81e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80036cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036d0:	d022      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x734>
 80036d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036d6:	d818      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036dc:	d00e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x718>
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e2:	d812      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d019      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x738>
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ec:	d10d      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80036ee:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 80036fa:	e010      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80036fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003702:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003706:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003708:	e009      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
        break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003730:	4901      	ldr	r1, [pc, #4]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003732:	4313      	orrs	r3, r2
 8003734:	658b      	str	r3, [r1, #88]	@ 0x58
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8003738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d034      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2b05      	cmp	r3, #5
 8003752:	d81d      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003797 	.word	0x08003797
 8003760:	08003775 	.word	0x08003775
 8003764:	08003783 	.word	0x08003783
 8003768:	08003797 	.word	0x08003797
 800376c:	08003797 	.word	0x08003797
 8003770:	08003797 	.word	0x08003797
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003774:	4b91      	ldr	r3, [pc, #580]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	4a90      	ldr	r2, [pc, #576]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003780:	e00a      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003782:	4b8e      	ldr	r3, [pc, #568]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	4a8d      	ldr	r2, [pc, #564]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800378e:	e003      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
        break;
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379e:	4b87      	ldr	r3, [pc, #540]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4984      	ldr	r1, [pc, #528]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	658b      	str	r3, [r1, #88]	@ 0x58
 80037b0:	e001      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80037c2:	4b7e      	ldr	r3, [pc, #504]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	4a7d      	ldr	r2, [pc, #500]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d021      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x806>
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80037ea:	4b74      	ldr	r3, [pc, #464]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	4a73      	ldr	r2, [pc, #460]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	75fb      	strb	r3, [r7, #23]
        break;
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8003806:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	496a      	ldr	r1, [pc, #424]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003818:	e001      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d043      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003832:	d02c      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003838:	d826      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800383a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383e:	d028      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003844:	d820      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800384a:	d016      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x896>
 800384c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003850:	d81a      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385a:	d007      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800385c:	e014      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800385e:	4b57      	ldr	r3, [pc, #348]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a56      	ldr	r2, [pc, #344]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800386a:	e013      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800386c:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4a52      	ldr	r2, [pc, #328]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003878:	e00c      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800387a:	4b50      	ldr	r3, [pc, #320]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	4a4f      	ldr	r2, [pc, #316]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003880:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003884:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003886:	e005      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800389a:	4b48      	ldr	r3, [pc, #288]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800389c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a6:	4945      	ldr	r1, [pc, #276]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	654b      	str	r3, [r1, #84]	@ 0x54
 80038ac:	e001      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80038c6:	d032      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80038c8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80038cc:	d82c      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80038ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d2:	d02e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d8:	d826      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80038da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038de:	d02a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80038e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038e4:	d820      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80038e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ea:	d016      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x936>
 80038ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f0:	d81a      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x91a>
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038fa:	d007      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x928>
 80038fc:	e014      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038fe:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003908:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800390a:	e015      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800390c:	4b2b      	ldr	r3, [pc, #172]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003916:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003918:	e00e      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800391a:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	4a27      	ldr	r2, [pc, #156]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003920:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003924:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003926:	e007      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
        break;
 800392c:	e004      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800393e:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394a:	491c      	ldr	r1, [pc, #112]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	654b      	str	r3, [r1, #84]	@ 0x54
 8003950:	e001      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03e      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003966:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800396a:	d029      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800396c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003970:	d820      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003976:	d016      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800397c:	d81a      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003986:	d007      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8003988:	e014      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003994:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003996:	e014      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003998:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	4a07      	ldr	r2, [pc, #28]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800399e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039a4:	e00d      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039b2:	e006      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
        break;
 80039b8:	e003      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d4:	498b      	ldr	r1, [pc, #556]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	650b      	str	r3, [r1, #80]	@ 0x50
 80039da:	e001      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d043      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f4:	d02c      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039fa:	d826      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a00:	d028      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a06:	d820      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0c:	d016      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a12:	d81a      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1c:	d007      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003a20:	4b78      	ldr	r3, [pc, #480]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	4a77      	ldr	r2, [pc, #476]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a2c:	e013      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003a2e:	4b75      	ldr	r3, [pc, #468]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	4a74      	ldr	r2, [pc, #464]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e00c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003a3c:	4b71      	ldr	r3, [pc, #452]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	4a70      	ldr	r2, [pc, #448]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a46:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a48:	e005      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003a5c:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a68:	4966      	ldr	r1, [pc, #408]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	654b      	str	r3, [r1, #84]	@ 0x54
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d03c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	2b40      	cmp	r3, #64	@ 0x40
 8003a86:	d026      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	d821      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a8c:	2b30      	cmp	r3, #48	@ 0x30
 8003a8e:	d024      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003a90:	2b30      	cmp	r3, #48	@ 0x30
 8003a92:	d81d      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d014      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d819      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d007      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003aa4:	e014      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003aa6:	4b57      	ldr	r3, [pc, #348]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	4a56      	ldr	r2, [pc, #344]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003ab2:	e013      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003ab4:	4b53      	ldr	r3, [pc, #332]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	4a52      	ldr	r2, [pc, #328]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00c      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003ac2:	4b50      	ldr	r3, [pc, #320]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	4a4f      	ldr	r2, [pc, #316]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ac8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003ace:	e005      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003ae2:	4b48      	ldr	r3, [pc, #288]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	4945      	ldr	r1, [pc, #276]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	650b      	str	r3, [r1, #80]	@ 0x50
 8003af4:	e001      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03c      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	2b50      	cmp	r3, #80	@ 0x50
 8003b0c:	d022      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003b0e:	2b50      	cmp	r3, #80	@ 0x50
 8003b10:	d81d      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d020      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d819      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003b1a:	2b30      	cmp	r3, #48	@ 0x30
 8003b1c:	d01e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003b1e:	2b30      	cmp	r3, #48	@ 0x30
 8003b20:	d815      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d00c      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d811      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003b32:	4b34      	ldr	r3, [pc, #208]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e010      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003b40:	4b30      	ldr	r3, [pc, #192]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	4a2f      	ldr	r2, [pc, #188]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003b4c:	e009      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
        break;
 8003b52:	e006      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b54:	bf00      	nop
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e002      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b68:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	4923      	ldr	r1, [pc, #140]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	654b      	str	r3, [r1, #84]	@ 0x54
 8003b7a:	e001      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03f      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b90:	2b50      	cmp	r3, #80	@ 0x50
 8003b92:	d022      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003b94:	2b50      	cmp	r3, #80	@ 0x50
 8003b96:	d81d      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d020      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d819      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003ba0:	2b30      	cmp	r3, #48	@ 0x30
 8003ba2:	d01e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ba4:	2b30      	cmp	r3, #48	@ 0x30
 8003ba6:	d815      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d00c      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d811      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d018      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bc4:	e010      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
        break;
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfa:	4902      	ldr	r1, [pc, #8]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	658b      	str	r3, [r1, #88]	@ 0x58
 8003c00:	e004      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d034      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d81d      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c20:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c63 	.word	0x08003c63
 8003c2c:	08003c41 	.word	0x08003c41
 8003c30:	08003c4f 	.word	0x08003c4f
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c63 	.word	0x08003c63
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003c40:	4b69      	ldr	r3, [pc, #420]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4a68      	ldr	r2, [pc, #416]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003c4e:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
        break;
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8003c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6e:	f023 0207 	bic.w	r2, r3, #7
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c76:	495c      	ldr	r1, [pc, #368]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	654b      	str	r3, [r1, #84]	@ 0x54
 8003c7c:	e001      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d033      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d81c      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cd7 	.word	0x08003cd7
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003cc3 	.word	0x08003cc3
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003cd7 	.word	0x08003cd7
 8003cb0:	08003cd7 	.word	0x08003cd7
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003cc2:	4b49      	ldr	r3, [pc, #292]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	4a48      	ldr	r2, [pc, #288]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
        break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8003cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cde:	4b42      	ldr	r3, [pc, #264]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	493f      	ldr	r1, [pc, #252]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	650b      	str	r3, [r1, #80]	@ 0x50
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d027      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d10:	d80c      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003d1e:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
        break;
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d46:	4928      	ldr	r1, [pc, #160]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003d4c:	e001      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da2c      	bge.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d5e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d62:	d017      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003d64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d68:	d811      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6e:	d011      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d74:	d80b      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003d80:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
        break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da8:	490f      	ldr	r1, [pc, #60]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	4906      	ldr	r1, [pc, #24]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8003dd4:	7dbb      	ldrb	r3, [r7, #22]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	58024400 	.word	0x58024400

08003dec <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCCEx_EnableClockProtection+0x24>)
 8003df6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003dfa:	4905      	ldr	r1, [pc, #20]	@ (8003e10 <HAL_RCCEx_EnableClockProtection+0x24>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	58024400 	.word	0x58024400

08003e14 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7fd fbae 	bl	8001580 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e0cb      	b.n	8003fca <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 80c4 	bne.w	8003fca <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd f9a4 	bl	8001190 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8003e48:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fca6 	bl	800479e <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <HAL_XSPI_Init+0x1c0>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68d1      	ldr	r1, [r2, #12]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6912      	ldr	r2, [r2, #16]
 8003e64:	0412      	lsls	r2, r2, #16
 8003e66:	4311      	orrs	r1, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6952      	ldr	r2, [r2, #20]
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0212      	lsls	r2, r2, #8
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ecc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fd51 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d162      	bne.n	8003fca <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <HAL_XSPI_Init+0x1c4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_XSPI_Init+0x11a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	@ (8003fdc <HAL_XSPI_Init+0x1c8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10f      	bne.n	8003f4e <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2120      	movs	r1, #32
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd2e 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_XSPI_Init+0x13a>
          {
            return status;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	e03e      	b.n	8003fcc <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <HAL_XSPI_Init+0x1cc>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6891      	ldr	r1, [r2, #8]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f72:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d107      	bne.n	8003fb2 <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0202 	orr.w	r2, r2, #2
 8003fb0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fba:	d103      	bne.n	8003fc4 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003fc2:	e002      	b.n	8003fca <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	f8e0c0fc 	.word	0xf8e0c0fc
 8003fd8:	52005000 	.word	0x52005000
 8003fdc:	5200a000 	.word	0x5200a000
 8003fe0:	feffffbf 	.word	0xfeffffbf

08003fe4 <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e015      	b.n	8004028 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0202 	bic.w	r2, r2, #2
 800401a:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fd f9b1 	bl	8001384 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b08a      	sub	sp, #40	@ 0x28
 8004036:	af02      	add	r7, sp, #8
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800403e:	f7fd fa9f 	bl	8001580 <HAL_GetTick>
 8004042:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d104      	bne.n	8004060 <HAL_XSPI_Command+0x2e>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800405e:	d115      	bne.n	800408c <HAL_XSPI_Command+0x5a>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b14      	cmp	r3, #20
 8004064:	d107      	bne.n	8004076 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d00e      	beq.n	800408c <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d00a      	beq.n	800408c <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b24      	cmp	r3, #36	@ 0x24
 800407a:	d15e      	bne.n	800413a <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8004080:	2b01      	cmp	r3, #1
 8004082:	d003      	beq.n	800408c <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8004088:	2b03      	cmp	r3, #3
 800408a:	d156      	bne.n	800413a <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2200      	movs	r2, #0
 8004094:	2120      	movs	r1, #32
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fc80 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d146      	bne.n	8004134 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fcaa 	bl	8004a08 <XSPI_ConfigCmd>
 80040b4:	4603      	mov	r3, r0
 80040b6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d143      	bne.n	8004146 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2120      	movs	r1, #32
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fc63 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80040e2:	e030      	b.n	8004146 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2204      	movs	r2, #4
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 80040f2:	e028      	b.n	8004146 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10b      	bne.n	8004114 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	2b24      	cmp	r3, #36	@ 0x24
 8004102:	d103      	bne.n	800410c <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2204      	movs	r2, #4
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800410a:	e01c      	b.n	8004146 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2214      	movs	r2, #20
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004112:	e018      	b.n	8004146 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d114      	bne.n	8004146 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	2b14      	cmp	r3, #20
 8004122:	d103      	bne.n	800412c <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2204      	movs	r2, #4
 8004128:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800412a:	e00c      	b.n	8004146 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004132:	e008      	b.n	8004146 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8004138:	e005      	b.n	8004146 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2210      	movs	r2, #16
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58
 8004144:	e000      	b.n	8004148 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8004146:	bf00      	nop
  }

  return status;
 8004148:	7ffb      	ldrb	r3, [r7, #31]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_XSPI_HyperbusCfg>:
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_HyperbusCfg(XSPI_HandleTypeDef *hxspi, XSPI_HyperbusCfgTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	@ 0x28
 8004156:	af02      	add	r7, sp, #8
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800415e:	f7fd fa0f 	bl	8001580 <HAL_GetTick>
 8004162:	61b8      	str	r0, [r7, #24]
  assert_param(IS_XSPI_ACCESS_TIME_CYCLE(pCfg->AccessTimeCycle));
  assert_param(IS_XSPI_WRITE_ZERO_LATENCY(pCfg->WriteZeroLatency));
  assert_param(IS_XSPI_LATENCY_MODE(pCfg->LatencyMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	617b      	str	r3, [r7, #20]
  if ((state == HAL_XSPI_STATE_HYPERBUS_INIT) || (state == HAL_XSPI_STATE_READY))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <HAL_XSPI_HyperbusCfg+0x24>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d125      	bne.n	80041c2 <HAL_XSPI_HyperbusCfg+0x70>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2200      	movs	r2, #0
 800417e:	2120      	movs	r1, #32
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fc0b 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d115      	bne.n	80041bc <HAL_XSPI_HyperbusCfg+0x6a>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hxspi->Instance->HLCR, ((pCfg->RWRecoveryTimeCycle << XSPI_HLCR_TRWR_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	431a      	orrs	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	ea42 0103 	orr.w	r1, r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (pCfg->AccessTimeCycle << XSPI_HLCR_TACC_Pos)     |
                                        pCfg->WriteZeroLatency | pCfg->LatencyMode));

      /* Update the state */
      hxspi->State = HAL_XSPI_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2202      	movs	r2, #2
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 80041ba:	e007      	b.n	80041cc <HAL_XSPI_HyperbusCfg+0x7a>
    }
    else
    {
      status = HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
 80041be:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80041c0:	e004      	b.n	80041cc <HAL_XSPI_HyperbusCfg+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2210      	movs	r2, #16
 80041ca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_XSPI_HyperbusCmd>:
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_HyperbusCmd(XSPI_HandleTypeDef *hxspi, XSPI_HyperbusCmdTypeDef *const pCmd,
                                       uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7fd f9cc 	bl	8001580 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  /* Check the state of the driver */
  if ((hxspi->State == HAL_XSPI_STATE_READY) && (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d154      	bne.n	800429c <HAL_XSPI_HyperbusCmd+0xc4>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041fa:	d14f      	bne.n	800429c <HAL_XSPI_HyperbusCmd+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2200      	movs	r2, #0
 8004204:	2120      	movs	r1, #32
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fbc8 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d13f      	bne.n	8004296 <HAL_XSPI_HyperbusCmd+0xbe>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004224:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hxspi->Instance->DCR1, XSPI_DCR1_MTYP_0, pCmd->AddressSpace);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data */
      /* - address and data on 8 or 16 lines */
      WRITE_REG(hxspi->Instance->CCR, (pCmd->DQSMode | XSPI_CCR_DDTR | pCmd->DataMode |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	431a      	orrs	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	ea42 0103 	orr.w	r1, r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b17      	ldr	r3, [pc, #92]	@ (80042b0 <HAL_XSPI_HyperbusCmd+0xd8>)
 8004254:	430b      	orrs	r3, r1
 8004256:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                                       pCmd->AddressWidth | XSPI_CCR_ADDTR | XSPI_CCR_ADMODE_2));
      WRITE_REG(hxspi->Instance->WCCR, (pCmd->DQSMode | XSPI_WCCR_DDTR | pCmd->DataMode |
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	431a      	orrs	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	ea42 0103 	orr.w	r1, r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <HAL_XSPI_HyperbusCmd+0xd8>)
 8004272:	430b      	orrs	r3, r1
 8004274:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
                                        pCmd->AddressWidth | XSPI_WCCR_ADDTR | XSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hxspi->Instance->DLR, (pCmd->DataLength - 1U));
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3a01      	subs	r2, #1
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hxspi->Instance->AR, pCmd->Address);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	6852      	ldr	r2, [r2, #4]
 800428c:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2204      	movs	r2, #4
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8004294:	e007      	b.n	80042a6 <HAL_XSPI_HyperbusCmd+0xce>
    }
    else
    {
      status = HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)
 800429a:	e004      	b.n	80042a6 <HAL_XSPI_HyperbusCmd+0xce>
    }
  }
  else
  {
    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2210      	movs	r2, #16
 80042a4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08000c00 	.word	0x08000c00

080042b4 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	@ 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7fd f95e 	bl	8001580 <HAL_GetTick>
 80042c4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3350      	adds	r3, #80	@ 0x50
 80042cc:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2208      	movs	r2, #8
 80042dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80042de:	e057      	b.n	8004390 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d14e      	bne.n	8004386 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004310:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2201      	movs	r2, #1
 800431a:	2104      	movs	r1, #4
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fb3d 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004326:	7ffb      	ldrb	r3, [r7, #31]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d113      	bne.n	8004354 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1df      	bne.n	8004312 <HAL_XSPI_Transmit+0x5e>
 8004352:	e000      	b.n	8004356 <HAL_XSPI_Transmit+0xa2>
          break;
 8004354:	bf00      	nop

      if (status == HAL_OK)
 8004356:	7ffb      	ldrb	r3, [r7, #31]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d119      	bne.n	8004390 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2201      	movs	r2, #1
 8004364:	2102      	movs	r1, #2
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fb18 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004370:	7ffb      	ldrb	r3, [r7, #31]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2202      	movs	r2, #2
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2202      	movs	r2, #2
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
 8004384:	e004      	b.n	8004390 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2210      	movs	r2, #16
 800438e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8004390:	7ffb      	ldrb	r3, [r7, #31]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b08c      	sub	sp, #48	@ 0x30
 800439e:	af02      	add	r7, sp, #8
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7fd f8eb 	bl	8001580 <HAL_GetTick>
 80043aa:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3350      	adds	r3, #80	@ 0x50
 80043b2:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ba:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80043c4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2208      	movs	r2, #8
 80043d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80043d8:	e07c      	b.n	80044d4 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d172      	bne.n	80044c8 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800440e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004418:	d104      	bne.n	8004424 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	649a      	str	r2, [r3, #72]	@ 0x48
 8004422:	e011      	b.n	8004448 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800442c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	649a      	str	r2, [r3, #72]	@ 0x48
 800443c:	e004      	b.n	8004448 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2201      	movs	r2, #1
 8004450:	2106      	movs	r1, #6
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 faa2 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800445e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004462:	2b00      	cmp	r3, #0
 8004464:	d114      	bne.n	8004490 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	1e5a      	subs	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1dc      	bne.n	8004448 <HAL_XSPI_Receive+0xae>
 800448e:	e000      	b.n	8004492 <HAL_XSPI_Receive+0xf8>
          break;
 8004490:	bf00      	nop

      if (status == HAL_OK)
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11c      	bne.n	80044d4 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2201      	movs	r2, #1
 80044a2:	2102      	movs	r1, #2
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa79 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2202      	movs	r2, #2
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2202      	movs	r2, #2
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80044c6:	e005      	b.n	80044d4 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2210      	movs	r2, #16
 80044d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 80044d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	@ 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7fd f848 	bl	8001580 <HAL_GetTick>
 80044f0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004502:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	2b04      	cmp	r3, #4
 800450a:	d167      	bne.n	80045dc <HAL_XSPI_AutoPolling+0xfc>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004514:	d162      	bne.n	80045dc <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2200      	movs	r2, #0
 800451e:	2120      	movs	r1, #32
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa3b 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d152      	bne.n	80045d6 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	6852      	ldr	r2, [r2, #4]
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	6912      	ldr	r2, [r2, #16]
 8004550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6899      	ldr	r1, [r3, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	430b      	orrs	r3, r1
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004572:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800457c:	d104      	bne.n	8004588 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	649a      	str	r2, [r3, #72]	@ 0x48
 8004586:	e011      	b.n	80045ac <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004590:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	649a      	str	r2, [r3, #72]	@ 0x48
 80045a0:	e004      	b.n	80045ac <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2201      	movs	r2, #1
 80045b4:	2108      	movs	r1, #8
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9f0 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80045c0:	7ffb      	ldrb	r3, [r7, #31]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d110      	bne.n	80045e8 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2208      	movs	r2, #8
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 80045d4:	e008      	b.n	80045e8 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80045da:	e005      	b.n	80045e8 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2210      	movs	r2, #16
 80045e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80045e6:	e000      	b.n	80045ea <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 80045e8:	bf00      	nop
  }

  return status;
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045fe:	f7fc ffbf 	bl	8001580 <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b04      	cmp	r3, #4
 800460a:	d134      	bne.n	8004676 <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	2120      	movs	r1, #32
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f9bf 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d12b      	bne.n	8004680 <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2288      	movs	r2, #136	@ 0x88
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b08      	cmp	r3, #8
 8004634:	d111      	bne.n	800465a <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	6852      	ldr	r2, [r2, #4]
 800463e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2210      	movs	r2, #16
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004658:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <HAL_XSPI_MemoryMapped+0x98>)
 8004662:	4013      	ands	r3, r2
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e004      	b.n	8004680 <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2210      	movs	r2, #16
 800467e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	cffffff7 	.word	0xcffffff7

08004690 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800469c:	f7fc ff70 	bl	8001580 <HAL_GetTick>
 80046a0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d06f      	beq.n	800478a <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d021      	beq.n	80046fc <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd f9a9 	bl	8001a24 <HAL_DMA_Abort>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2204      	movs	r2, #4
 80046e0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd f99c 	bl	8001a24 <HAL_DMA_Abort>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2204      	movs	r2, #4
 80046fa:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d033      	beq.n	8004772 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0202 	orr.w	r2, r2, #2
 8004718:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2201      	movs	r2, #1
 8004724:	2102      	movs	r1, #2
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f938 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d12e      	bne.n	8004794 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2202      	movs	r2, #2
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2200      	movs	r2, #0
 8004748:	2120      	movs	r1, #32
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f926 	bl	800499c <XSPI_WaitFlagStateUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11c      	bne.n	8004794 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004768:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004770:	e010      	b.n	8004794 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004780:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
 8004788:	e004      	b.n	8004794 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2210      	movs	r2, #16
 8004792:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	@ 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	611a      	str	r2, [r3, #16]
 80047e4:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80047ec:	e014      	b.n	8004818 <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 80047ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047f2:	3301      	adds	r3, #1
 80047f4:	b2d8      	uxtb	r0, r3
 80047f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80047fa:	f107 0114 	add.w	r1, r7, #20
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	4619      	mov	r1, r3
 800480a:	f000 fa97 	bl	8004d3c <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 800480e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004812:	3301      	adds	r3, #1
 8004814:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800481c:	2b01      	cmp	r3, #1
 800481e:	d9e6      	bls.n	80047ee <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 8004820:	4b5b      	ldr	r3, [pc, #364]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 800482c:	4b58      	ldr	r3, [pc, #352]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a57      	ldr	r2, [pc, #348]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 8004838:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 8004844:	4b53      	ldr	r3, [pc, #332]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 8004850:	4b50      	ldr	r3, [pc, #320]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a4f      	ldr	r2, [pc, #316]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 800485c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 8004868:	4b4b      	ldr	r3, [pc, #300]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 800486e:	4b4a      	ldr	r3, [pc, #296]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	4946      	ldr	r1, [pc, #280]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a41      	ldr	r2, [pc, #260]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d110      	bne.n	80048b0 <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d027      	beq.n	80048ec <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 800489c:	4b3e      	ldr	r3, [pc, #248]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	493b      	ldr	r1, [pc, #236]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a37      	ldr	r2, [pc, #220]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d110      	bne.n	80048dc <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d011      	beq.n	80048ec <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 80048c8:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4930      	ldr	r1, [pc, #192]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
 80048da:	e007      	b.n	80048ec <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	f043 0208 	orr.w	r2, r3, #8
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e04c      	b.n	8004986 <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80048f2:	e02a      	b.n	800494a <HAL_XSPIM_Config+0x18e>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
 80048f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3330      	adds	r3, #48	@ 0x30
 8004902:	443b      	add	r3, r7
 8004904:	3b18      	subs	r3, #24
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	3330      	adds	r3, #48	@ 0x30
 8004918:	443b      	add	r3, r7
 800491a:	3b18      	subs	r3, #24
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4299      	cmp	r1, r3
 8004920:	d105      	bne.n	800492e <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 8004922:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1c      	ldr	r2, [pc, #112]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d105      	bne.n	8004940 <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 8004934:	4b18      	ldr	r3, [pc, #96]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <HAL_XSPIM_Config+0x1dc>)
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8004940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004944:	3301      	adds	r3, #1
 8004946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800494a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0d0      	beq.n	80048f4 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 8004952:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 800495e:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0b      	ldr	r2, [pc, #44]	@ (8004990 <HAL_XSPIM_Config+0x1d4>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 800496a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a06      	ldr	r2, [pc, #24]	@ (8004994 <HAL_XSPIM_Config+0x1d8>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6013      	str	r3, [r2, #0]
  }

  return status;
 8004982:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	@ 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	52005000 	.word	0x52005000
 8004994:	5200a000 	.word	0x5200a000
 8004998:	5200b400 	.word	0x5200b400

0800499c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80049ac:	e019      	b.n	80049e2 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b4:	d015      	beq.n	80049e2 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7fc fde3 	bl	8001580 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <XSPI_WaitFlagStateUntilTimeout+0x30>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2202      	movs	r2, #2
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e00e      	b.n	8004a00 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d1d7      	bne.n	80049ae <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	@ 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a24:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d114      	bne.n	8004a76 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004a54:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004a5e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004a68:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e02c      	b.n	8004ad0 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d114      	bne.n	8004aa8 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004a86:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a90:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a9a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e013      	b.n	8004ad0 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ab0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004aba:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004ac4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af8:	4319      	orrs	r1, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	430b      	orrs	r3, r1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 021f 	bic.w	r2, r3, #31
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	431a      	orrs	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3a01      	subs	r2, #1
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01e      	beq.n	8004b7a <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b44:	d10a      	bne.n	8004b5c <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004b56:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8004b5a:	e00e      	b.n	8004b7a <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d109      	bne.n	8004b7a <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b76:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8095 	beq.w	8004cae <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d053      	beq.n	8004c34 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01e      	beq.n	8004bd2 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b64      	ldr	r3, [pc, #400]	@ (8004d2c <XSPI_ConfigCmd+0x324>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	68d1      	ldr	r1, [r2, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	6952      	ldr	r2, [r2, #20]
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	6912      	ldr	r2, [r2, #16]
 8004baa:	4311      	orrs	r1, r2
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	69d2      	ldr	r2, [r2, #28]
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	6a12      	ldr	r2, [r2, #32]
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e026      	b.n	8004c20 <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b56      	ldr	r3, [pc, #344]	@ (8004d30 <XSPI_ConfigCmd+0x328>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	68d1      	ldr	r1, [r2, #12]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	6952      	ldr	r2, [r2, #20]
 8004be2:	4311      	orrs	r1, r2
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	6912      	ldr	r2, [r2, #16]
 8004be8:	4311      	orrs	r1, r2
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	69d2      	ldr	r2, [r2, #28]
 8004bee:	4311      	orrs	r1, r2
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bf4:	4311      	orrs	r1, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	6a12      	ldr	r2, [r2, #32]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c0a:	d109      	bne.n	8004c20 <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d105      	bne.n	8004c20 <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	6992      	ldr	r2, [r2, #24]
 8004c30:	649a      	str	r2, [r3, #72]	@ 0x48
 8004c32:	e074      	b.n	8004d1e <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b3c      	ldr	r3, [pc, #240]	@ (8004d34 <XSPI_ConfigCmd+0x32c>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	68d1      	ldr	r1, [r2, #12]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	6952      	ldr	r2, [r2, #20]
 8004c4c:	4311      	orrs	r1, r2
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	6912      	ldr	r2, [r2, #16]
 8004c52:	4311      	orrs	r1, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	431a      	orrs	r2, r3
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e01d      	b.n	8004ca4 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68d9      	ldr	r1, [r3, #12]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	4319      	orrs	r1, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	431a      	orrs	r2, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c8e:	d109      	bne.n	8004ca4 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d105      	bne.n	8004ca4 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e037      	b.n	8004d1e <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02e      	beq.n	8004d14 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d015      	beq.n	8004cea <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d38 <XSPI_ConfigCmd+0x330>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	69d1      	ldr	r1, [r2, #28]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	6a12      	ldr	r2, [r2, #32]
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e00e      	b.n	8004d08 <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	69d9      	ldr	r1, [r3, #28]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	4319      	orrs	r1, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	431a      	orrs	r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	6992      	ldr	r2, [r2, #24]
 8004d10:	649a      	str	r2, [r3, #72]	@ 0x48
 8004d12:	e004      	b.n	8004d1e <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3724      	adds	r7, #36	@ 0x24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	f0ffc0c0 	.word	0xf0ffc0c0
 8004d30:	ffffc0c0 	.word	0xffffc0c0
 8004d34:	f0ffffc0 	.word	0xf0ffffc0
 8004d38:	f0ffc0ff 	.word	0xf0ffc0ff

08004d3c <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d124      	bne.n	8004d98 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	e002      	b.n	8004d68 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8004d68:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d003      	beq.n	8004d7c <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 8004d7a:	e03a      	b.n	8004df2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8004d7c:	4b20      	ldr	r3, [pc, #128]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d103      	bne.n	8004d90 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2270      	movs	r2, #112	@ 0x70
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	e030      	b.n	8004df2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2210      	movs	r2, #16
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	e02c      	b.n	8004df2 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 8004da2:	4b17      	ldr	r3, [pc, #92]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d003      	beq.n	8004dbe <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e002      	b.n	8004dc4 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d003      	beq.n	8004dd8 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
}
 8004dd6:	e00c      	b.n	8004df2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <XSPIM_GetConfig+0xc4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d103      	bne.n	8004dec <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2270      	movs	r2, #112	@ 0x70
 8004de8:	601a      	str	r2, [r3, #0]
}
 8004dea:	e002      	b.n	8004df2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2210      	movs	r2, #16
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	5200b400 	.word	0x5200b400

08004e04 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 8004e0a:	f000 f80e 	bl	8004e2a <MapMemory>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 8004e18:	f000 f836 	bl	8004e88 <JumpToApplication>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 8004e20:	79fb      	ldrb	r3, [r7, #7]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	71bb      	strb	r3, [r7, #6]
 8004e38:	e01d      	b.n	8004e76 <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 8004e3a:	79bb      	ldrb	r3, [r7, #6]
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f94a 	bl	80050d8 <EXTMEM_MemoryMappedMode>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e4a:	d002      	beq.n	8004e52 <MapMemory+0x28>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <MapMemory+0x44>
 8004e50:	e00a      	b.n	8004e68 <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8004e52:	79bb      	ldrb	r3, [r7, #6]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 8004e58:	2304      	movs	r3, #4
 8004e5a:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 8004e5c:	e007      	b.n	8004e6e <MapMemory+0x44>
            EXTMEM_DeInit(index);
 8004e5e:	79bb      	ldrb	r3, [r7, #6]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f8fb 	bl	800505c <EXTMEM_DeInit>
      break;
 8004e66:	e002      	b.n	8004e6e <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	71fb      	strb	r3, [r7, #7]
      break;
 8004e6c:	e000      	b.n	8004e70 <MapMemory+0x46>
      break;
 8004e6e:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8004e70:	79bb      	ldrb	r3, [r7, #6]
 8004e72:	3301      	adds	r3, #1
 8004e74:	71bb      	strb	r3, [r7, #6]
 8004e76:	79bb      	ldrb	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0de      	beq.n	8004e3a <MapMemory+0x10>
    }
  }
  return retr;
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b091      	sub	sp, #68	@ 0x44
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e92:	3b40      	subs	r3, #64	@ 0x40
 8004e94:	331f      	adds	r3, #31
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	015c      	lsls	r4, r3, #5
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 8004e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f000 f971 	bl	8005188 <EXTMEM_GetMapAddress>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <JumpToApplication+0x28>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 8004eac:	2304      	movs	r3, #4
 8004eae:	e08b      	b.n	8004fc8 <JumpToApplication+0x140>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8004eb0:	f7fc fb96 	bl	80015e0 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
 8004eb4:	4b46      	ldr	r3, [pc, #280]	@ (8004fd0 <JumpToApplication+0x148>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d016      	beq.n	8004eee <JumpToApplication+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec0:	f3bf 8f4f 	dsb	sy
}
 8004ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ec6:	f3bf 8f6f 	isb	sy
}
 8004eca:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8004ecc:	4b40      	ldr	r3, [pc, #256]	@ (8004fd0 <JumpToApplication+0x148>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd0 <JumpToApplication+0x148>)
 8004ed2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ed6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd0 <JumpToApplication+0x148>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004ee0:	f3bf 8f4f 	dsb	sy
}
 8004ee4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ee6:	f3bf 8f6f 	isb	sy
}
 8004eea:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8004eec:	bf00      	nop
  }
#endif /* defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
 8004eee:	4b38      	ldr	r3, [pc, #224]	@ (8004fd0 <JumpToApplication+0x148>)
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d043      	beq.n	8004f82 <JumpToApplication+0xfa>
    #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
       __ALIGNED(__SCB_DCACHE_LINE_SIZE)
    #endif
    ;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004efa:	4b35      	ldr	r3, [pc, #212]	@ (8004fd0 <JumpToApplication+0x148>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004f02:	f3bf 8f4f 	dsb	sy
}
 8004f06:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8004f08:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f14:	f3bf 8f4f 	dsb	sy
}
 8004f18:	bf00      	nop
    /* As we can't align the stack to the cache line size, invalidate each of the variables */
      SCB->DCCIMVAC = (uint32_t)&locals.sets;
      SCB->DCCIMVAC = (uint32_t)&locals.ways;
      SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
    #else
      SCB->DCCIMVAC = (uint32_t)&locals;
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  __ASM volatile ("dsb 0xF":::"memory");
 8004f22:	f3bf 8f4f 	dsb	sy
}
 8004f26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f28:	f3bf 8f6f 	isb	sy
}
 8004f2c:	bf00      	nop
    #endif
      __DSB();
      __ISB();
    #endif

    locals.ccsidr = SCB->CCSIDR;
 8004f2e:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f34:	6023      	str	r3, [r4, #0]
                                            /* clean & invalidate D-Cache */
    locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	0b5b      	lsrs	r3, r3, #13
 8004f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f3e:	6063      	str	r3, [r4, #4]
    do {
      locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f48:	60a3      	str	r3, [r4, #8]
      do {
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004f52:	4013      	ands	r3, r2
                       ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004f54:	68a2      	ldr	r2, [r4, #8]
 8004f56:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004f58:	491d      	ldr	r1, [pc, #116]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (locals.ways-- != 0U);
 8004f60:	68a3      	ldr	r3, [r4, #8]
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	60a2      	str	r2, [r4, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1ef      	bne.n	8004f4a <JumpToApplication+0xc2>
    } while(locals.sets-- != 0U);
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	6062      	str	r2, [r4, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <JumpToApplication+0xb8>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f74:	f3bf 8f4f 	dsb	sy
}
 8004f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f7a:	f3bf 8f6f 	isb	sy
}
 8004f7e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004f80:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f82:	f3ef 8310 	mrs	r3, PRIMASK
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    SCB_DisableDCache();
  }
#endif /* defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8004f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8004f8c:	b672      	cpsid	i
}
 8004f8e:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  SCB->VTOR = (uint32_t)Application_vector;
 8004f94:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd0 <JumpToApplication+0x148>)
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <JumpToApplication+0x14c>)
 8004fa4:	601a      	str	r2, [r3, #0]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	f383 8808 	msr	MSP, r3
}
 8004fb2:	bf00      	nop
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fba:	f383 8810 	msr	PRIMASK, r3
}
 8004fbe:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <JumpToApplication+0x14c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4798      	blx	r3
  return BOOT_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3744      	adds	r7, #68	@ 0x44
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	e000ed00 	.word	0xe000ed00
 8004fd4:	240000f0 	.word	0x240000f0

08004fd8 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8004fe2:	23fb      	movs	r3, #251	@ 0xfb
 8004fe4:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d12f      	bne.n	800504c <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8004ff0:	4919      	ldr	r1, [pc, #100]	@ (8005058 <EXTMEM_Init+0x80>)
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d120      	bne.n	8005046 <EXTMEM_Init+0x6e>
#endif /* EXTMEM_DRIVER_PSRAM == 1 */
#if EXTMEM_DRIVER_USER == 1
    case EXTMEM_USER :{
      /* Initialize the SFDP memory */
      EXTMEM_DRIVER_USER_StatusTypeDef status;
      status = EXTMEM_DRIVER_USER_Init(MemId,
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3308      	adds	r3, #8
 8005010:	4a11      	ldr	r2, [pc, #68]	@ (8005058 <EXTMEM_Init+0x80>)
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fb fbab 	bl	8000774 <EXTMEM_DRIVER_USER_Init>
 800501e:	4603      	mov	r3, r0
 8005020:	73bb      	strb	r3, [r7, #14]
                                       &extmem_list_config[MemId].UserObject);
      switch(status){
 8005022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005026:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800502a:	d002      	beq.n	8005032 <EXTMEM_Init+0x5a>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <EXTMEM_Init+0x60>
 8005030:	e005      	b.n	800503e <EXTMEM_Init+0x66>
      case EXTMEM_DRIVER_USER_NOTSUPPORTED:{
        retr = EXTMEM_ERROR_NOTSUPPORTED;
 8005032:	23ff      	movs	r3, #255	@ 0xff
 8005034:	73fb      	strb	r3, [r7, #15]
        break;
 8005036:	e005      	b.n	8005044 <EXTMEM_Init+0x6c>
      }
      case EXTMEM_DRIVER_USER_OK:{
        /* nothing to do */
        retr = EXTMEM_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
        break;
 800503c:	e002      	b.n	8005044 <EXTMEM_Init+0x6c>
      }
      default:{
        retr = EXTMEM_ERROR_DRIVER;
 800503e:	23fd      	movs	r3, #253	@ 0xfd
 8005040:	73fb      	strb	r3, [r7, #15]
        break;
 8005042:	bf00      	nop
      }
      }
      break;
 8005044:	e002      	b.n	800504c <EXTMEM_Init+0x74>
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005046:	23fe      	movs	r3, #254	@ 0xfe
 8005048:	73fb      	strb	r3, [r7, #15]
        break;
 800504a:	bf00      	nop
      }
    }
  }
  return retr;
 800504c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	240000f4 	.word	0x240000f4

0800505c <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005064:	23fb      	movs	r3, #251	@ 0xfb
 8005066:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d12c      	bne.n	80050c8 <EXTMEM_DeInit+0x6c>
  {
    retr = EXTMEM_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8005072:	4918      	ldr	r1, [pc, #96]	@ (80050d4 <EXTMEM_DeInit+0x78>)
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d11d      	bne.n	80050c2 <EXTMEM_DeInit+0x66>
      }
#endif /* EXTMEM_DRIVER_PSRAM == 1 */
#if EXTMEM_DRIVER_USER == 1
    case EXTMEM_USER :{
      /* Initialize the SFDP memory */
      EXTMEM_DRIVER_USER_StatusTypeDef status = EXTMEM_DRIVER_USER_DeInit(&extmem_list_config[MemId].UserObject);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3308      	adds	r3, #8
 8005092:	4a10      	ldr	r2, [pc, #64]	@ (80050d4 <EXTMEM_DeInit+0x78>)
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fbb5 	bl	8000808 <EXTMEM_DRIVER_USER_DeInit>
 800509e:	4603      	mov	r3, r0
 80050a0:	73bb      	strb	r3, [r7, #14]
      switch(status){
 80050a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80050aa:	d002      	beq.n	80050b2 <EXTMEM_DeInit+0x56>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <EXTMEM_DeInit+0x62>
 80050b0:	e002      	b.n	80050b8 <EXTMEM_DeInit+0x5c>
      case EXTMEM_DRIVER_USER_NOTSUPPORTED:
        retr = EXTMEM_ERROR_NOTSUPPORTED;
 80050b2:	23ff      	movs	r3, #255	@ 0xff
 80050b4:	73fb      	strb	r3, [r7, #15]
        break;
 80050b6:	e003      	b.n	80050c0 <EXTMEM_DeInit+0x64>
      case EXTMEM_DRIVER_USER_OK:
        /* nothing to do, the returned status is already set to EXTMEM_OK */
        break;
      default:
        retr = EXTMEM_ERROR_DRIVER;
 80050b8:	23fd      	movs	r3, #253	@ 0xfd
 80050ba:	73fb      	strb	r3, [r7, #15]
        break;
 80050bc:	e000      	b.n	80050c0 <EXTMEM_DeInit+0x64>
        break;
 80050be:	bf00      	nop
      }
      break;
 80050c0:	e002      	b.n	80050c8 <EXTMEM_DeInit+0x6c>
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80050c2:	23fe      	movs	r3, #254	@ 0xfe
 80050c4:	73fb      	strb	r3, [r7, #15]
        break;
 80050c6:	bf00      	nop
      }
    }
  }
  return retr;
 80050c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	240000f4 	.word	0x240000f4

080050d8 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 80050e4:	23fb      	movs	r3, #251	@ 0xfb
 80050e6:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d143      	bne.n	8005176 <EXTMEM_MemoryMappedMode+0x9e>
  {
    retr = EXTMEM_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 80050f2:	4924      	ldr	r1, [pc, #144]	@ (8005184 <EXTMEM_MemoryMappedMode+0xac>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d031      	beq.n	800516a <EXTMEM_MemoryMappedMode+0x92>
 8005106:	2b04      	cmp	r3, #4
 8005108:	d132      	bne.n	8005170 <EXTMEM_MemoryMappedMode+0x98>
#endif /* EXTMEM_DRIVER_PSRAM == 1 */
#if EXTMEM_DRIVER_USER == 1
     case EXTMEM_USER :{
       /* Initialize the SFDP memory */
       EXTMEM_DRIVER_USER_StatusTypeDef status;
       if (EXTMEM_ENABLE == State)
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10e      	bne.n	800512e <EXTMEM_MemoryMappedMode+0x56>
       {
         status = EXTMEM_DRIVER_USER_Enable_MemoryMappedMode(&extmem_list_config[MemId].UserObject);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	3308      	adds	r3, #8
 800511c:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <EXTMEM_MemoryMappedMode+0xac>)
 800511e:	4413      	add	r3, r2
 8005120:	3304      	adds	r3, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fb7e 	bl	8000824 <EXTMEM_DRIVER_USER_Enable_MemoryMappedMode>
 8005128:	4603      	mov	r3, r0
 800512a:	73bb      	strb	r3, [r7, #14]
 800512c:	e00d      	b.n	800514a <EXTMEM_MemoryMappedMode+0x72>
       }
       else
       {
         status = EXTMEM_DRIVER_USER_Disable_MemoryMappedMode(&extmem_list_config[MemId].UserObject);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3308      	adds	r3, #8
 800513a:	4a12      	ldr	r2, [pc, #72]	@ (8005184 <EXTMEM_MemoryMappedMode+0xac>)
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb fbcd 	bl	80008e0 <EXTMEM_DRIVER_USER_Disable_MemoryMappedMode>
 8005146:	4603      	mov	r3, r0
 8005148:	73bb      	strb	r3, [r7, #14]
       }
       switch(status){
 800514a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800514e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8005152:	d002      	beq.n	800515a <EXTMEM_MemoryMappedMode+0x82>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <EXTMEM_MemoryMappedMode+0x8e>
 8005158:	e002      	b.n	8005160 <EXTMEM_MemoryMappedMode+0x88>
       case EXTMEM_DRIVER_USER_NOTSUPPORTED:
         retr = EXTMEM_ERROR_NOTSUPPORTED;
 800515a:	23ff      	movs	r3, #255	@ 0xff
 800515c:	73fb      	strb	r3, [r7, #15]
         break;
 800515e:	e003      	b.n	8005168 <EXTMEM_MemoryMappedMode+0x90>
       case EXTMEM_DRIVER_USER_OK:
         break;
       default:
         retr = EXTMEM_ERROR_DRIVER;
 8005160:	23fd      	movs	r3, #253	@ 0xfd
 8005162:	73fb      	strb	r3, [r7, #15]
         break;
 8005164:	e000      	b.n	8005168 <EXTMEM_MemoryMappedMode+0x90>
         break;
 8005166:	bf00      	nop
       }
       break;
 8005168:	e005      	b.n	8005176 <EXTMEM_MemoryMappedMode+0x9e>
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 800516a:	23ff      	movs	r3, #255	@ 0xff
 800516c:	73fb      	strb	r3, [r7, #15]
    break;
 800516e:	e002      	b.n	8005176 <EXTMEM_MemoryMappedMode+0x9e>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8005170:	23fe      	movs	r3, #254	@ 0xfe
 8005172:	73fb      	strb	r3, [r7, #15]
        break;
 8005174:	bf00      	nop
      }
    }
  }
  return retr;
 8005176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	240000f4 	.word	0x240000f4

08005188 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8005192:	23fb      	movs	r3, #251	@ 0xfb
 8005194:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d129      	bne.n	80051f0 <EXTMEM_GetMapAddress+0x68>
  {
    retr = EXTMEM_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 80051a0:	4916      	ldr	r1, [pc, #88]	@ (80051fc <EXTMEM_GetMapAddress+0x74>)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11a      	bne.n	80051ea <EXTMEM_GetMapAddress+0x62>
        break;
      }
#endif /* EXTMEM_DRIVER_PSRAM == 1 */
#if EXTMEM_DRIVER_USER == 1
      case EXTMEM_USER:{
        switch(EXTMEM_DRIVER_USER_GetMapAddress(&extmem_list_config[MemId].UserObject, BaseAddress))
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	3308      	adds	r3, #8
 80051c0:	4a0e      	ldr	r2, [pc, #56]	@ (80051fc <EXTMEM_GetMapAddress+0x74>)
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb fb9d 	bl	8000908 <EXTMEM_DRIVER_USER_GetMapAddress>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80051d4:	d002      	beq.n	80051dc <EXTMEM_GetMapAddress+0x54>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <EXTMEM_GetMapAddress+0x5a>
        {
          case EXTMEM_DRIVER_USER_OK:
          break;
 80051da:	e005      	b.n	80051e8 <EXTMEM_GetMapAddress+0x60>
          case EXTMEM_DRIVER_USER_NOTSUPPORTED:
            retr = EXTMEM_ERROR_NOTSUPPORTED;
 80051dc:	23ff      	movs	r3, #255	@ 0xff
 80051de:	73fb      	strb	r3, [r7, #15]
          break;
 80051e0:	e002      	b.n	80051e8 <EXTMEM_GetMapAddress+0x60>
          default :
            retr = EXTMEM_ERROR_DRIVER;
 80051e2:	23fd      	movs	r3, #253	@ 0xfd
 80051e4:	73fb      	strb	r3, [r7, #15]
          break;
 80051e6:	bf00      	nop
        }
      break;
 80051e8:	e002      	b.n	80051f0 <EXTMEM_GetMapAddress+0x68>
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80051ea:	23fe      	movs	r3, #254	@ 0xfe
 80051ec:	73fb      	strb	r3, [r7, #15]
        break;
 80051ee:	bf00      	nop
      }
    }
  }
  return retr;
 80051f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	240000f4 	.word	0x240000f4

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4d0d      	ldr	r5, [pc, #52]	@ (8005248 <__libc_init_array+0x38>)
 8005214:	4c0d      	ldr	r4, [pc, #52]	@ (800524c <__libc_init_array+0x3c>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	2600      	movs	r6, #0
 800521c:	42a6      	cmp	r6, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	4d0b      	ldr	r5, [pc, #44]	@ (8005250 <__libc_init_array+0x40>)
 8005222:	4c0c      	ldr	r4, [pc, #48]	@ (8005254 <__libc_init_array+0x44>)
 8005224:	f000 f818 	bl	8005258 <_init>
 8005228:	1b64      	subs	r4, r4, r5
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2600      	movs	r6, #0
 800522e:	42a6      	cmp	r6, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f855 3b04 	ldr.w	r3, [r5], #4
 8005238:	4798      	blx	r3
 800523a:	3601      	adds	r6, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005242:	4798      	blx	r3
 8005244:	3601      	adds	r6, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08005270 	.word	0x08005270
 800524c:	08005270 	.word	0x08005270
 8005250:	08005270 	.word	0x08005270
 8005254:	08005274 	.word	0x08005274

08005258 <_init>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr

08005264 <_fini>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr
